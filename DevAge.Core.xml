<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevAge.Core</name>
    </assembly>
    <members>
        <member name="T:DevAge.Collections.ObjectByTypeCollection">
            <summary>
            A collection of object with a special method that returns an object compatible with a specified Type, GetObjectByType(Type).
            </summary>
        </member>
        <member name="M:DevAge.Collections.ObjectByTypeCollection.GetObjectByType(System.Type)">
            <summary>
            Returns an object of the list that is compatible from the specified type. The Type is compared using the IsAssignableFrom method. If there isn't a compatible method returns null.
            </summary>
            <param name="searchType"></param>
            <returns></returns>
        </member>
        <member name="T:DevAge.ComponentModel.Controller.ControllerContainer">
            <summary>
            A list of IController interface that belongs to a specifig object to observe. WHen adding/removing items to this collection the Attach/Detach method is automatically called.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.FindController(System.Type)">
            <summary>
            Returns null if not exist
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.AddController(DevAge.ComponentModel.Controller.IController)">
            <summary>
            Add the specified controller and call the Attach method.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.RemoveController(DevAge.ComponentModel.Controller.IController)">
            <summary>
            Remove the specified controller and call the Detach method
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList">
            <summary>
            A collection of elements of type IController
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.#ctor">
            <summary>
            Initializes a new empty instance of the ControllerContainer class.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.#ctor(DevAge.ComponentModel.Controller.IController[])">
            <summary>
            Initializes a new instance of the ControllerContainer class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ControllerContainer.
            </param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.#ctor(DevAge.ComponentModel.Controller.ControllerContainer.ControllerList)">
            <summary>
            Initializes a new instance of the ControllerContainer class, containing elements
            copied from another instance of ControllerContainer
            </summary>
            <param name="items">
            The ControllerContainer whose elements are to be added to the new ControllerContainer.
            </param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.AddRange(DevAge.ComponentModel.Controller.IController[])">
            <summary>
            Adds the elements of an array to the end of this ControllerContainer.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ControllerContainer.
            </param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.AddRange(DevAge.ComponentModel.Controller.ControllerContainer.ControllerList)">
            <summary>
            Adds the elements of another ControllerContainer to the end of this ControllerContainer.
            </summary>
            <param name="items">
            The ControllerContainer whose elements are to be added to the end of this ControllerContainer.
            </param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.Add(DevAge.ComponentModel.Controller.IController)">
            <summary>
            Adds an instance of type IController to the end of this ControllerContainer.
            </summary>
            <param name="value">
            The IController to be added to the end of this ControllerContainer.
            </param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.Contains(DevAge.ComponentModel.Controller.IController)">
            <summary>
            Determines whether a specfic IController value is in this ControllerContainer.
            </summary>
            <param name="value">
            The IController value to locate in this ControllerContainer.
            </param>
            <returns>
            true if value is found in this ControllerContainer;
            false otherwise.
            </returns>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.IndexOf(DevAge.ComponentModel.Controller.IController)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ControllerContainer
            </summary>
            <param name="value">
            The IController value to locate in the ControllerContainer.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.Insert(System.Int32,DevAge.ComponentModel.Controller.IController)">
            <summary>
            Inserts an element into the ControllerContainer at the specified index
            </summary>
            <param name="index">
            The index at which the IController is to be inserted.
            </param>
            <param name="value">
            The IController to insert.
            </param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.Remove(DevAge.ComponentModel.Controller.IController)">
            <summary>
            Removes the first occurrence of a specific IController from this ControllerContainer.
            </summary>
            <param name="value">
            The IController value to remove from this ControllerContainer.
            </param>
        </member>
        <member name="M:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ControllerContainer.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.Item(System.Int32)">
            <summary>
            Gets or sets the IController at the given index in this ControllerContainer.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Controller.ControllerContainer.ControllerList.Enumerator">
            <summary>
            Type-specific enumeration class, used by ControllerContainer.GetEnumerator.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Controller.IController">
            <summary>
            An interface to support the controller (Observer) pattern.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.CurrencyTypeConverter">
            <summary>
            A TypeConverter that support string conversion from and to string with the currency symbol.
            Support Conversion for Float, Double and Decimal, Int
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.NumberTypeConverter">
            <summary>
            A TypeConverter that support string conversion from and to string with a custom format number.
            Support Conversion for Float, Double and Decimal, Int
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.DateTimeTypeConverter">
            <summary>
            Summary description for DateTimeTypeConverter.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.DateTimeStyles">
            <summary>
            DateTimeStyle for Parse operations. DefaultValue: AllowInnerWhite|AllowLeadingWhite|AllowTrailingWhite|AllowWhiteSpaces
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.Format">
            <summary>
            Format of the Date. Example: G, g, d, D. Default value : G
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.DateTimeTypeConverter.ParseFormats">
            <summary>
            Formats to check when parse the string. If null call with no format the parse method. Default value: null
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Converter.PercentTypeConverter">
            <summary>
            A TypeConverter that support string conversion from and to string with the percent symbol.
            Support Conversion for Float, Double and Decimal
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Converter.PercentTypeConverter.ConsiderAllStringAsPercent">
            <summary>
            If true and the user insert a string with no percent symbel the value is divided by 100, otherwise not.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.IValidator">
            <summary>
            An interface to support value conversion and validation. 
            Naming Legend:
            Object = an object not yet converted for the current validator, 
            Value = an object already converted and valid for the current validator, 
            String = a string that can be used for conversion to and from Value, 
            DisplayString = a string representation of the Value
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsNullString(System.String)">
            <summary>
            Returns true if the string is null or if is equals to the NullString
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ObjectToValue(System.Object)">
            <summary>
            Convert an object according to the current ValueType of the validator
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToObject(System.Object,System.Type)">
            <summary>
            Convert a value valid for the current validator ValueType to an object with the Type specified. Throw an exception on error.
            </summary>
            <param name="p_Value"></param>
            <param name="p_ReturnObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToString(System.Object)">
            <summary>
            Convert a value valid for the current validator ValueType to a string that can be used for other conversions, for example StringToValue method.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.StringToValue(System.String)">
            <summary>
            Converts a string to an object according to the type of the string editor
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsStringConversionSupported">
            <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.ValueToDisplayString(System.Object)">
            <summary>
            Converts a value valid for this validator valuetype to a string representation. The string cannot be used for conversion.
            If the validator support string conversion this method simply call ValueToString otherwise call Value.ToString()
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidValue(System.Object)">
            <summary>
            Returns true if the value is valid for this type of editor without any conversion.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidObject(System.Object)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions.
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidObject(System.Object,System.Object@)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions. Returns as parameter the value converted.
            </summary>
            <param name="p_Object"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidString(System.String)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function.
            </summary>
            <param name="p_strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsValidString(System.String,System.Object@)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function. An returns the object converted.
            </summary>
            <param name="p_strValue"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.IsInStandardValues(System.Object)">
            <summary>
            Returns true if the value specified is presents in the list StandardValues.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.StandardValueAtIndex(System.Int32)">
            <summary>
            Returns the standard values at the specified index. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_Index"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.IValidator.StandardValuesIndexOf(System.Object)">
            <summary>
            Returns the index of the specified standard value. -1 if not found. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_StandardValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.AllowNull">
            <summary>
            True to allow null object value or NullString string Value
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.NullString">
            <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToString and StringToValue
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.NullDisplayString">
            <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToDisplayString
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.AllowStringConversion">
            <summary>
            Gets or Sets if the string conversion is allowed.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.MinimumValue">
            <summary>
            Minimum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.MaximumValue">
            <summary>
            Maximum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.ValueType">
            <summary>
            Type allowed for the current editor. Cannot be null.
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingObjectToValue">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingValueToObject">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.IValidator.ConvertingValueToDisplayString">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.DefaultValue">
            <summary>
            Default value for this editor, usually is the default value for the specified type.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.StandardValues">
            <summary>
            A list of values that this editor can support. If StandardValuesExclusive is true then the editor can only support one of these values.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.StandardValuesExclusive">
            <summary>
            If StandardValuesExclusive is true then the editor can only support the list specified in StandardValues.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.IValidator.CultureInfo">
            <summary>
            Culture for conversion. If null the default user culture is used. Default is null.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.ValidatorBase">
            <summary>
            A base class to support value conversion and validation. This class is used if no conversion is required or as a base class for specialized validator.
            Naming Legend:
            Object = an object not yet converted for the current validator, 
            Value = an object already converted and valid for the current validator, 
            String = a string that can be used for conversion to and from Value, 
            DisplayString = a string representation of the Value
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.#ctor">
            <summary>
            Constructor. Initialize the class using a null type.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The type used to validate the values. If null no validation is made.</param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsNullString(System.String)">
            <summary>
            Returns true if the string is null or if is equals to the NullString
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ObjectToStringForError(System.Object)">
            <summary>
            Returns a string used for error description for a specified object. Usually used when printing the object for the error message when there is a conversion error.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ObjectToValue(System.Object)">
            <summary>
            Convert an object according to the current ValueType of the validator
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToObject(System.Object,System.Type)">
            <summary>
            Convert a value according to the current ValueType to an object with the Type specified. Throw an exception on error.
            </summary>
            <param name="p_Value"></param>
            <param name="p_ReturnObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToString(System.Object)">
            <summary>
            Converts a value object to a string representation
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StringToValue(System.String)">
            <summary>
            Converts a string to an object according to the type of the string editor
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsStringConversionSupported">
            <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.ValueToDisplayString(System.Object)">
            <summary>
            Converts a value valid for this validator valuetype to a string representation. The string cannot be used for conversion.
            If the validator support string conversion this method simply call ValueToString otherwise call Value.ToString()
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingObjectToValue">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingValueToObject">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="F:DevAge.ComponentModel.Validator.ValidatorBase.m_ConvertingValueToDisplayString">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingObjectToValue(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingValueToObject(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.OnConvertingValueToDisplayString(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidValue(System.Object)">
            <summary>
            Returns true if the value is valid for this type of editor without any conversion.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidObject(System.Object)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions.
            </summary>
            <param name="p_Object"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidObject(System.Object,System.Object@)">
            <summary>
            Returns true if the object is valid for this type of validator, using conversion functions. Returns as parameter the value converted.
            </summary>
            <param name="p_Object"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidString(System.String)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function.
            </summary>
            <param name="p_strValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsValidString(System.String,System.Object@)">
            <summary>
            Returns true if the string is valid for this type of editor, using string conversion function. Returns as out parameter the object converted.
            </summary>
            <param name="p_strValue"></param>
            <param name="p_ValueConverted"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.IsInStandardValues(System.Object)">
            <summary>
            Returns true if the value specified is presents in the list StandardValues.
            </summary>
            <param name="p_Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StandardValueAtIndex(System.Int32)">
            <summary>
            Returns the standard values at the specified index. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_Index"></param>
            <returns></returns>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorBase.StandardValuesIndexOf(System.Object)">
            <summary>
            Returns the index of the specified standard value. -1 if not found. If StandardValues support IList use simple the indexer method otherwise loop troght the collection.
            </summary>
            <param name="p_StandardValue"></param>
            <returns></returns>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.AllowNull">
            <summary>
            True to allow null object value or NullString string Value
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.NullString">
            <summary>
            Null string representation. A string is null when is null or when is equals to this string. Default is empty string.
            Used by ValueToString and StringToValue
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.NullDisplayString">
            <summary>
            Null string representation. Default is empty string.
            Used by ValueToDisplayString
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.AllowStringConversion">
            <summary>
            Gets or Sets if the string conversion is allowed.
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingObjectToValue">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingValueToObject">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
        </member>
        <member name="E:DevAge.ComponentModel.Validator.ValidatorBase.ConvertingValueToDisplayString">
            <summary>
            Fired when converting a value to a display string. Called from method ValueToDisplayString
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.MinimumValue">
            <summary>
            Minimum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.MaximumValue">
            <summary>
            Maximum value allowed. If null no check is performed. The value must derive from IComparable interface to use Minimum or Maximum feature.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.ValueType">
            <summary>
            Type allowed for the current editor. Cannot be null.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.ValueTypeName">
            <summary>
            Set the ValueType property using a string value, usually used by designer code generation.
            The designer for this type is configured to use only this property.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.DefaultValue">
            <summary>
            Default value for this editor, usually is the default value for the specified type.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.StandardValues">
            <summary>
            A list of values that this editor can support. If StandardValuesExclusive is true then the editor can only support one of these values.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.StandardValuesExclusive">
            <summary>
            If StandardValuesExclusive is true then the editor can only support the list specified in StandardValues.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorBase.CultureInfo">
            <summary>
            Culture for conversion. If null the default user culture is used. Default is null.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.ValidatorTypeConverter">
            <summary>
            A string editor that use a TypeConverter for conversion.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor">
            <summary>
            Constructor. Initialize the Validator with a null TypeConverter.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor(System.Type)">
            <summary>
            Constructor. If the Type doesn't implements a TypeConverter no conversion is made.
            </summary>
            <param name="p_Type"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.#ctor(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Constructor
            </summary>
            <param name="p_Type">Cannot be null.</param>
            <param name="p_TypeConverter">Can be null to don't allow any conversion.</param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.IsStringConversionSupported">
            <summary>
            Returns true if string conversion is suported. AllowStringConversion must be true and the current Validator must support string conversion.
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.OnConvertingObjectToValue(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValidatorTypeConverter.OnConvertingValueToObject(DevAge.ComponentModel.ConvertingObjectEventArgs)">
            <summary>
            Fired when converting a object to the value specified. Called from method ObjectToValue and IsValidObject
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValidatorTypeConverter.TypeConverter">
            <summary>
            TypeConverter used for this type editor, cannot be null.
            </summary>
        </member>
        <member name="T:DevAge.ComponentModel.Validator.ValueMapping">
            <summary>
            The ValueMapping class can be used to easily map a value to a string value or a display string for conversion
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.#ctor(DevAge.ComponentModel.Validator.IValidator,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="validator"></param>
            <param name="valueList">A list of valid value. If null an error occurred. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
            <param name="displayStringList">A list of displayString. Can be null. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
            <param name="specialList">A list of object that can be converted to value. Can be null. The index must match the index of ValueList, ObjectList and DisplayStringList</param>
            <param name="specialType">The type of object stored in the specialList collection.</param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.BindValidator(DevAge.ComponentModel.Validator.IValidator)">
            <summary>
            Bind the specified validator
            </summary>
            <param name="p_Validator"></param>
        </member>
        <member name="M:DevAge.ComponentModel.Validator.ValueMapping.UnBindValidator(DevAge.ComponentModel.Validator.IValidator)">
            <summary>
            Unbind the specified validator
            </summary>
            <param name="p_Validator"></param>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.ValueList">
            <summary>
            A list of valid value. If null an error occurred. The index must match the index of ValueList and DisplayStringList
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.SpecialList">
            <summary>
            A list of object that can be converted to value. Can be null. The index must match the index of ValueList and DisplayStringList. Must be a list of object of the type specified in the SpecialType property.
            Usually this property can be used when performing special conversion of specific type. For example if you want to map an enum value or an id value to a string for a better user experience.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.SpecialType">
            <summary>
            Gets or sets the type used for converting an object to a value and a value to an object when populating the SpecialList property. Default is System.String.
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.DisplayStringList">
            <summary>
            A list of displayString. Can be null. The index must match the index of ValueList and DisplayStringList
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.Validator.ValueMapping.ThrowErrorIfNotFound">
            <summary>
            Gets or sets, if throw an error when the value if not found in one of the collections
            </summary>
        </member>
        <member name="P:DevAge.ComponentModel.ConvertingObjectEventArgs.DestinationType">
            <summary>
            Destination type to convert the Value. Can be null if no destination type is required.
            </summary>
        </member>
        <member name="T:DevAge.Configuration.CommandLineArgs">
            <summary>
            Description résumée de Arguments.
            </summary>
        </member>
        <member name="T:DevAge.Configuration.PersistableItemDictionary">
            <summary>
            A dictionary with keys of type String and values of type PersistableItem
            </summary>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the PersistableItemDictionary class
            </summary>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.Add(System.String,DevAge.Configuration.PersistableItem)">
            <summary>
            Adds an element with the specified key and value to this PersistableItemDictionary.
            </summary>
            <param name="key">
            The String key of the element to add.
            </param>
            <param name="value">
            The PersistableItem value of the element to add.
            </param>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.Contains(System.String)">
            <summary>
            Determines whether this PersistableItemDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this PersistableItemDictionary.
            </param>
            <returns>
            true if this PersistableItemDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this PersistableItemDictionary contains a specific key.
            </summary>
            <param name="key">
            The String key to locate in this PersistableItemDictionary.
            </param>
            <returns>
            true if this PersistableItemDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.ContainsValue(DevAge.Configuration.PersistableItem)">
            <summary>
            Determines whether this PersistableItemDictionary contains a specific value.
            </summary>
            <param name="value">
            The PersistableItem value to locate in this PersistableItemDictionary.
            </param>
            <returns>
            true if this PersistableItemDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DevAge.Configuration.PersistableItemDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this PersistableItemDictionary.
            </summary>
            <param name="key">
            The String key of the element to remove.
            </param>
        </member>
        <member name="P:DevAge.Configuration.PersistableItemDictionary.Item(System.String)">
            <summary>
            Gets or sets the PersistableItem associated with the given String
            </summary>
            <param name="key">
            The String whose value to get or set.
            </param>
        </member>
        <member name="P:DevAge.Configuration.PersistableItemDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this PersistableItemDictionary.
            </summary>
        </member>
        <member name="P:DevAge.Configuration.PersistableItemDictionary.Values">
            <summary>
            Gets a collection containing the values in this PersistableItemDictionary.
            </summary>
        </member>
        <member name="T:DevAge.Configuration.PersistableSettings">
            <summary>
            Summary description for PersistableSettings.
            </summary>
        </member>
        <member name="M:DevAge.Configuration.PersistableSettings.ReadFromOther(DevAge.Configuration.PersistableSettings)">
            <summary>
            Clone all fields using the ValueToString and StringToValue methods
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:DevAge.ExceptionEventArgs">
            <summary>
            Common EventArgs class used to store and raise events with an Exception associated
            </summary>
        </member>
        <member name="T:DevAge.ExceptionEventHandler">
            <summary>
            Common EventHandler class used to raise events with an Exception associated
            </summary>
        </member>
        <member name="T:DevAge.IO.IsolatedStorage.IsolatedStorageSettingBase">
            <summary>
            Abstract class that help to save settings in the isolated storage
            </summary>
        </member>
        <member name="T:DevAge.IO.StreamPersistence">
            <summary>
            A class that helps save and load with stream persistence
            </summary>
        </member>
        <member name="M:DevAge.IO.StreamPersistence.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DevAge.IO.IsolatedStorage.IsolatedStorageSettingVersionBase">
            <summary>
            Summary description for IsolatedStorageSettingVersionBase.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.IActivity">
            <summary>
            An interface to represents a basic activity.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.IActivity.Start(DevAge.Patterns.IActivityEvents)">
            <summary>
            Start the activity and all sub activities.
            </summary>
            <param name="events">Interface class that receive the events, can be null if no event class is needed.</param>
        </member>
        <member name="M:DevAge.Patterns.IActivity.Cancel">
            <summary>
            Cancel the current activity and all sub activities throwing a ActivityCanceledException.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.SubActivities">
            <summary>
            Subordinated activities. Are executed after the current activity. If one of these activity throws an exception is propagated to parent activity and the operation is stopped.
             Note that the sub activities can be async and so can be executed in a parellel mode.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Status">
            <summary>
            Activity status
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Name">
            <summary>
            Name of the activity used to describe the class.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.WaitHandle">
            <summary>
            Gets the WaitHandle class used to wait for the completition of the activity.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Exception">
            <summary>
            Gets the exception throwed when the activity fail. Null if no exception.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.Parent">
            <summary>
            Gets or sets the Activity parent. Null when it is a root activity.
            Do not set manually the parent activity, but simply add the activity to the SubActivities collection.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.IActivity.FullName">
            <summary>
            Gets the activity full name of the activity, composed by the full name of the parent activity separated with a \ character
            </summary>
        </member>
        <member name="F:DevAge.Patterns.SubActivityWaitMode.DoNotWait">
            <summary>
            Don't wait the sub activities to finish (parallel processing, asyncronous)
            </summary>
        </member>
        <member name="F:DevAge.Patterns.SubActivityWaitMode.WaitOnEach">
            <summary>
            Wait for each sub activities (syncronous)
            </summary>
        </member>
        <member name="F:DevAge.Patterns.SubActivityWaitMode.WaitAtTheEnd">
            <summary>
            Wait all the sub activities at the end (parallel processing but syncronized with the parent)
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityBase">
            <summary>
            Base activity class. Override the OnWork method to customize the activity.
            </summary>
        </member>
        <member name="F:DevAge.Patterns.ActivityBase.mActivityCount">
            <summary>
            An activity count used only to generate a seguential name
            </summary>
        </member>
        <member name="F:DevAge.Patterns.ActivityBase.mWaitHandle">
            <summary>
            Initially set to signaled=true=completed, nonsignaled=false=notcompleted,
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.ResetRunningStatus">
            <summary>
            Reset the status property to the original values. If the activity is still running an exception is throw.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.OnWork">
            <summary>
            Working method. Abstract. Override this method to provide a specific work for the activity.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.DoWork">
            <summary>
            Internal work method. Call the OnWork method and Start the SubActivities.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.WaitActivities(DevAge.Patterns.ActivityCollection,System.Int32)">
            <summary>
            Wait until or SubActivities are completed. Throw an exception on timeout.
            </summary>
            <param name="activities"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.WaitActivity(DevAge.Patterns.IActivity,System.Int32)">
            <summary>
            Wait until or SubActivities are completed. Throw an exception on timeout.
            </summary>
            <param name="activity"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.CheckActivitiesException(DevAge.Patterns.ActivityCollection)">
            <summary>
            Throw an exception if one of the activities has an exception.
            </summary>
            <param name="activities"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.CheckActivityException(DevAge.Patterns.IActivity)">
            <summary>
            Throw an exception if one of the activities has an exception.
            </summary>
            <param name="activity"></param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.StartActivity">
            <summary>
            Start the activity. NOTE: Usually don't override this method but override the OnWork method to implement the specific activity work.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.Start(DevAge.Patterns.IActivityEvents)">
            <summary>
            Start the activity. If the activity is already running an exception is throw.
            To override the common working code use the OnWork abstract method.
            </summary>
            <param name="events">Interface class that receive the events, can be null if no event class is needed.</param>
        </member>
        <member name="M:DevAge.Patterns.ActivityBase.Cancel">
            <summary>
            Cancel the current activity and all sub activities throwing a ActivityCanceledException.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.SubActivitiesTimeOut">
            <summary>
            Gets or sets the time to wait for the sub activities. If the operation is still executing then a TimeOutException is fired. Default is System.Threading.Timeout.Infinite. Default is true.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.PropagateException">
            <summary>
            Gets or sets if propagate an exception from sub activities to the current activities. Default is true.
            Only valid SubActivitiesTimeOut is WaitOnEach or WaitAtTheEnd
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.SubActivityWaitMode">
            <summary>
            Gets or sets how the current activity wait the completition of the sub activities.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.SubActivities">
            <summary>
            Subordinated activities. Are executed after the current activity. If one of these activity throws an exception is propagated to parent activity and the operation is stopped.
             Note that the sub activities can be async and so can be executed in a parellel mode.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Status">
            <summary>
            Activity status
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Name">
            <summary>
            Name of the activity used to describe the class.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.WaitHandle">
            <summary>
            Gets the WaitHandle class used to wait for the completition of the activity.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Exception">
            <summary>
            Gets the exception throwed when the activity fail. Null if no exception.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.Parent">
            <summary>
            Gets or sets the Activity parent. Null when it is a root activity.
            Do not set manually the parent activity, but simply add the activity to the SubActivities collection.
            </summary>
        </member>
        <member name="P:DevAge.Patterns.ActivityBase.FullName">
            <summary>
            Gets the activity full name of the activity, composed by the full name of the parent activity separated with a \ character
            </summary>
        </member>
        <member name="T:DevAge.Patterns.Activity">
            <summary>
            An activity used as a container for other activities using a syncronized code.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.AsynchronousActivity">
            <summary>
            An activity used as a container for other activities using an asynchronous code.
            Override the OnAsyncWork method for custom asynchronous work.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.AsyncActivityBase">
            <summary>
            Base activity class. Override the OnBeginWork and OnEndWork method to customize the activity.
            This class support an asyncronous activity.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.OnBeginWork(System.AsyncCallback)">
            <summary>
            Begind working method. Called to start the asyncronous activity. Abstract.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.OnEndWork(System.IAsyncResult)">
            <summary>
            End working method. Called when the asyncronous operation is finished
            </summary>
            <param name="asyncResult">AsyncResult</param>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.OnWork">
            <summary>
            Working method.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.AsyncActivityBase.StartActivity">
            <summary>
            Start the activity. NOTE: Usually don't override this method but override the OnBeginWork method to implement the specific activity work.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityCollection">
            <summary>
            A collection of elements of type Activity
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.#ctor(DevAge.Patterns.IActivity)">
            <summary>
            Initializes a new empty instance of the ActivityCollection class.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Contains(DevAge.Patterns.IActivity)">
            <summary>
            Determines whether a specfic IActivity value is in this ActivityCollection.
            </summary>
            <param name="value">
            The IActivity value to locate in this ActivityCollection.
            </param>
            <returns>
            true if value is found in this ActivityCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.IndexOf(DevAge.Patterns.IActivity)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ActivityCollection
            </summary>
            <param name="value">
            The IActivity value to locate in the ActivityCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Add(DevAge.Patterns.IActivity)">
            <summary>
            Adds an instance of type IActivity to the end of this ActivityCollection.
            </summary>
            <param name="value">
            The IActivity to be added to the end of this ActivityCollection.
            </param>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Insert(System.Int32,DevAge.Patterns.IActivity)">
            <summary>
            Inserts an element into the ActivityCollection at the specified index
            </summary>
            <param name="index">
            The index at which the IActivity is to be inserted.
            </param>
            <param name="value">
            The IActivity to insert.
            </param>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.Remove(DevAge.Patterns.IActivity)">
            <summary>
            Removes the first occurrence of a specific IActivity from this ActivityCollection.
            </summary>
            <param name="value">
            The IActivity value to remove from this ActivityCollection.
            </param>
        </member>
        <member name="M:DevAge.Patterns.ActivityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ActivityCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:DevAge.Patterns.ActivityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IActivity at the given index in this ActivityCollection.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ActivityCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.IActivityEvents">
            <summary>
            Interface to receive the callback for the activity events.
            </summary>
        </member>
        <member name="M:DevAge.Patterns.IActivityEvents.ActivityStarted(DevAge.Patterns.IActivity)">
            <summary>
            Fired when the activity is started
            </summary>
            <param name="sender">Activity that have sended the event</param>
        </member>
        <member name="M:DevAge.Patterns.IActivityEvents.ActivityCompleted(DevAge.Patterns.IActivity)">
            <summary>
            Fired when the activity is completed
            </summary>
            <param name="sender">Activity that have sended the event</param>
        </member>
        <member name="M:DevAge.Patterns.IActivityEvents.ActivityException(DevAge.Patterns.IActivity,System.Exception)">
            <summary>
            Fired when the activity or one of its children throws an exception
            </summary>
            <param name="sender">Activity that have sended the event</param>
            <param name="exception"></param>
        </member>
        <member name="T:DevAge.Patterns.IAsyncActivity">
            <summary>
            Interface for asyncronuos activity. Extend the IActivity interface
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityCanceledException">
            <summary>
            Exception fired when canceling an activity with the Cancel method.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.ActivityStatusNotValidException">
            <summary>
            Exception fired when canceling an activity with the Cancel method.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.TimeOutActivityException">
            <summary>
            Exception fired when a time out is encountered.
            </summary>
        </member>
        <member name="T:DevAge.Patterns.SubActivityException">
            <summary>
            Exception fired when a time out is encountered.
            </summary>
        </member>
    </members>
</doc>
