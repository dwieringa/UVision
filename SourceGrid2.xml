<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SourceGrid2</name>
    </assembly>
    <members>
        <member name="T:SourceGrid2.BehaviorModels.BehaviorModelCollection">
            <summary>
            A collection of elements of type IBehaviorModel
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.#ctor">
            <summary>
            Initializes a new empty instance of the BehaviorModelCollection class.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.#ctor(SourceGrid2.BehaviorModels.IBehaviorModel[])">
            <summary>
            Initializes a new instance of the BehaviorModelCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new BehaviorModelCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.#ctor(SourceGrid2.BehaviorModels.BehaviorModelCollection)">
            <summary>
            Initializes a new instance of the BehaviorModelCollection class, containing elements
            copied from another instance of BehaviorModelCollection
            </summary>
            <param name="items">
            The BehaviorModelCollection whose elements are to be added to the new BehaviorModelCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.AddRange(SourceGrid2.BehaviorModels.IBehaviorModel[])">
            <summary>
            Adds the elements of an array to the end of this BehaviorModelCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this BehaviorModelCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.AddRange(SourceGrid2.BehaviorModels.BehaviorModelCollection)">
            <summary>
            Adds the elements of another BehaviorModelCollection to the end of this BehaviorModelCollection.
            </summary>
            <param name="items">
            The BehaviorModelCollection whose elements are to be added to the end of this BehaviorModelCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.Add(SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Adds an instance of type IBehaviorModel to the end of this BehaviorModelCollection. If null the item is not added
            </summary>
            <param name="value">
            The IBehaviorModel to be added to the end of this BehaviorModelCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.Contains(SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Determines whether a specfic IBehaviorModel value is in this BehaviorModelCollection.
            </summary>
            <param name="value">
            The IBehaviorModel value to locate in this BehaviorModelCollection.
            </param>
            <returns>
            true if value is found in this BehaviorModelCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.IndexOf(SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this BehaviorModelCollection
            </summary>
            <param name="value">
            The IBehaviorModel value to locate in the BehaviorModelCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.Insert(System.Int32,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Inserts an element into the BehaviorModelCollection at the specified index
            </summary>
            <param name="index">
            The index at which the IBehaviorModel is to be inserted.
            </param>
            <param name="value">
            The IBehaviorModel to insert.
            </param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.Remove(SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Removes the first occurrence of a specific IBehaviorModel from this BehaviorModelCollection.
            </summary>
            <param name="value">
            The IBehaviorModel value to remove from this BehaviorModelCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this BehaviorModelCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:SourceGrid2.BehaviorModels.BehaviorModelCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IBehaviorModel at the given index in this BehaviorModelCollection.
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.BehaviorModelCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by BehaviorModelCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.Enumerator.#ctor(SourceGrid2.BehaviorModels.BehaviorModelCollection)">
            <summary>
            Constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.BehaviorModelCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.BehaviorModelCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.BehaviorModelGroup">
            <summary>
            A behavior model with a collection of children model (SubModels). Can be used to nest a list of model.
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.IBehaviorModel">
            <summary>
            Represents a behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnContextMenuPopUp(SourceGrid2.PositionContextMenuEventArgs)">
            <summary>
            Fired when a context menu is showed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnMouseDown(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnMouseUp(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnMouseMove(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnMouseEnter(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnMouseLeave(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnKeyUp(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnKeyDown(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnKeyPress(SourceGrid2.PositionKeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnDoubleClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnFocusLeaving(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired before the cell leave the focus, you can put the e.Cancel = true to cancel the leave operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnFocusLeft(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the cell has left the focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnFocusEntering(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the focus is entering in the specified cell. You can put the e.Cancel = true to cancel the focus operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnFocusEntered(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the focus enter in the specified cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnValueChanged(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnEditStarting(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the StartEdit is called. You can set the Cancel = true to stop editing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.IBehaviorModel.OnEditEnded(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.IBehaviorModel.CanReceiveFocus">
            <summary>
            Returns true if the current cell can receive the focus. If only one behavior return false the return value is false.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnContextMenuPopUp(SourceGrid2.PositionContextMenuEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnMouseDown(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnMouseUp(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnMouseMove(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnMouseEnter(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnMouseLeave(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnDoubleClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnKeyUp(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnKeyDown(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnKeyPress(SourceGrid2.PositionKeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnFocusLeaving(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnFocusLeft(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnFocusEntering(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnFocusEntered(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnValueChanged(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnEditStarting(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BehaviorModelGroup.OnEditEnded(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.BehaviorModelGroup.SubModels">
            <summary>
            SubModels. Populate this list of Behavior to create a 'tree' of BehaviorModel.
            </summary>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.BehaviorModelGroup.CanReceiveFocus">
            <summary>
            True if the cell can have the focus otherwise false. This method simply call BehaviorModel.CanReceiveFocus.
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.BindProperty">
            <summary>
            Summary description for BindProperty.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BindProperty.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="p_Property">Property of the object that you want to lint to the cell. When the value of the cell changed this behavior call automatically this property.</param>
            <param name="p_LinkObject">Instance of the object to link</param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BindProperty.OnValueChanged(SourceGrid2.PositionEventArgs)">
            <summary>
            OnValueChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BindProperty.BindValueAtProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Bind the cell's value with the property p_Property of the object p_LinkObject
            when the cell's value change also the property change
            </summary>
            <param name="p_Property">linked property</param>
            <param name="p_LinkObject">Can be null to call static property</param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.BindProperty.UnBindValueAtProperty">
            <summary>
            UnBind the cell with the property
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.Button">
            <summary>
            A behavior that invalidate the cell when the user click on it and make the cell unselectable. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.Button.Default">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Button.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Button.#ctor(SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_BehaviorUnselectable"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Button.OnMouseDown(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Button.OnMouseUp(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.CheckBox">
            <summary>
            Summary description for BehaviorModelCheckBox. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.CheckBox.Default">
            <summary>
            Default behavior checkbox
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.CheckBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.CheckBox.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_bAutoChangeValueOfSelectedCells">Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox.</param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.CheckBox.UIChangeChecked(SourceGrid2.PositionEventArgs)">
            <summary>
            Toggle the value of the current cell and if AutoChangeValueOfSelectedCells is true of all the selected cells
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.CheckBox.AutoChangeValueOfSelectedCells">
            <summary>
            Indicates if this cells when checked or uncheck must change also the value of the selected cells of type CellCheckBox. Default is false
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.ColumnHeader">
            <summary>
            A behavior that support sort and resize. Once created cannot be modified. When calculated automatically the range to sort is all the grid range without the rows minor of the current row and the range header is all the grid range with the rows minor or equal of the current row
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ColumnHeader.Default">
            <summary>
            Column header behavior with sort and resize support, same as SortResizeHeader.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ColumnHeader.SortHeader">
            <summary>
            Column header behavior with sort support
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ColumnHeader.ResizeHeader">
            <summary>
            Column header behavior with resize support
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ColumnHeader.SortResizeHeader">
            <summary>
            Column header behavior with sort and resize support
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ColumnHeader.NoSortNoResizeHeader">
            <summary>
            Column header behavior without sort and without resize support.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.ColumnHeader.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.ColumnHeader.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_EnableSort"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.ColumnHeader.#ctor(System.Boolean,SourceGrid2.IRangeLoader,SourceGrid2.IRangeLoader,SourceGrid2.BehaviorModels.Resize,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_EnableSort">True to enable sort, otherwise false.</param>
            <param name="p_RangeToSort">If null and p_EnableSort is true then the range is automatically calculated.</param>
            <param name="p_HeaderRange">If null and p_EnableSort is true then the range is automatically calculated.</param>
            <param name="p_BehaviorResize"></param>
            <param name="p_BehaviorButton"></param>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ColumnHeader.m_RangeToSort">
            <summary>
            Range to sort
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ColumnHeader.m_HeaderRange">
            <summary>
            Header range (can be null).
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.ColumnHeader.IsSortEnable(SourceGrid2.PositionEventArgs)">
            <summary>
            Indicates if for the specified cell the sort is enabled.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.ColumnHeader.SortColumn(SourceGrid2.PositionEventArgs,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort the current column. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
            <param name="e"></param>
            <param name="p_bAscending"></param>
            <param name="p_Comparer"></param>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.ColumnHeader.RangeToSort">
            <summary>
            Range to sort. If null and EnableSort is true the range is automatically calculated.
            </summary>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.ColumnHeader.RangeHeader">
            <summary>
            Header range. If null and EnableSort is true the range is automatically calculated.
            </summary>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.ColumnHeader.EnableSort">
            <summary>
            True to enable sort otherwise false. Default is true.
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.Common">
            <summary>
            Common behavior of the cell. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.Common.Default">
            <summary>
            The default behavior of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnKeyDown(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnKeyPress(SourceGrid2.PositionKeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnDoubleClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnFocusEntered(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnFocusLeft(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnValueChanged(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Common.OnEditEnded(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when editing is ended
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.ContextMenu">
            <summary>
            Allow to customize the contextmenu of a cell. This class read the contextmenu from the ICellContextMenu.GetContextMenu.  This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ContextMenu.Default">
            <summary>
            Default tooltiptext
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.Cursor">
            <summary>
            Allow to customize the cursor of a cell. The cell must implement ICellCursor. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Cursor.ApplyCursor(SourceGrid2.PositionEventArgs)">
            <summary>
            Change the cursor with the cursor of the cell
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Cursor.ResetCursor(SourceGrid2.PositionEventArgs)">
            <summary>
            Reset the original cursor
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.CustomEvents">
            <summary>
            Summary description for BehaviorModelEvent.
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.Header">
            <summary>
            Summary description for Header.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.Header.Default">
            <summary>
            Default column header behavior
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Header.#ctor(SourceGrid2.BehaviorModels.Resize,SourceGrid2.BehaviorModels.Button)">
            <summary>
            Constructor
            </summary>
            <param name="p_BehaviorResize"></param>
            <param name="p_BehaviorButton"></param>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.Resize">
            <summary>
            Implement the mouse resize features of a cell. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.Resize.ResizeBoth">
            <summary>
            Resize both width nd height behavior
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.Resize.ResizeWidth">
            <summary>
            Resize width behavior
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.Resize.ResizeHeight">
            <summary>
            Resize height behavior
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Resize.#ctor(SourceGrid2.CellResizeMode)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Resize.IsInResizeHorRegion(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="p_CellRectangle">A grid relative rectangle</param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.Resize.IsInResizeVerRegion(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="p_CellRectangle">A grid relative rectangle</param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.Resize.ResizeMode">
            <summary>
            Resize mode of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.Resize.IsWidthResizing">
            <summary>
            Indicates if the behavior is currently resizing a cell width
            </summary>
        </member>
        <member name="P:SourceGrid2.BehaviorModels.Resize.IsHeightResizing">
            <summary>
            Indicates if the behavior is currently resizing a cell height
            </summary>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.RowHeader">
            <summary>
            Summary description for BehaviorModelRowHeader.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.RowHeader.Default">
            <summary>
            Default Row Header
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.RowHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.RowHeader.#ctor(SourceGrid2.BehaviorModels.Resize,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_BehaviorResize"></param>
            <param name="p_BehaviorButton"></param>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.ToolTipText">
            <summary>
            Allow to customize the tooltiptext of a cell. This class read the tooltiptext from the ICellToolTipText.GetToolTipText.  This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="F:SourceGrid2.BehaviorModels.ToolTipText.Default">
            <summary>
            Default tooltiptext
            </summary>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.ToolTipText.ApplyToolTipText(SourceGrid2.PositionEventArgs)">
            <summary>
            Change the cursor with the cursor of the cell
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.BehaviorModels.ToolTipText.ResetToolTipText(SourceGrid2.PositionEventArgs)">
            <summary>
            Reset the original cursor
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid2.BehaviorModels.Unselectable">
            <summary>
            Implements a behavior that cannot receive the focus. This behavior can be shared between multiple cells.
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.Button">
            <summary>
            A cell that rappresent a button 
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.CellVirtual">
            <summary>
            Represents a CellVirtual in a grid.
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.ICellVirtual">
            <summary>
            Interface to represents a cell virtual (without position or value information).
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.BindToGrid(SourceGrid2.GridVirtual)">
            <summary>
            Link the cell at the specified grid.
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.UnBindToGrid">
            <summary>
            Remove the link of the cell from the previous grid.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.GetValue(SourceGrid2.Position)">
            <summary>
            Get the value of the cell at the specified position
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.SetValue(SourceGrid2.Position,System.Object)">
            <summary>
            Set the value of the cell at the specified position. This method must call OnValueChanged() event.
            </summary>
            <param name="p_Position"></param>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.GetDisplayText(SourceGrid2.Position)">
            <summary>
            The string representation of the Cell.GetValue method (default Value.ToString())
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.Measure(SourceGrid2.Position,System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            If the cell is not linked to a grid the result is not accurate (Font can be null). Call InternalGetRequiredSize with RowSpan and ColSpan = 1.
            </summary>
            <param name="p_Position">Position of the current cell</param>
            <param name="g"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.StartEdit(SourceGrid2.Position,System.Object)">
            <summary>
            Start the edit operation with the current editor specified in the Model property.
            </summary>
            <param name="p_Position"></param>
            <param name="p_NewStartEditValue">The value that the editor receive. Null to use the Value of the Cell.</param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.EndEdit(System.Boolean)">
            <summary>
            Terminate the edit operation
            </summary>
            <param name="p_bCancel">If true undo all the changes</param>
            <returns>Returns true if the edit operation is successfully terminated, otherwise false</returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.IsEditing(SourceGrid2.Position)">
            <summary>
            True if this cell is currently in edit state, otherwise false.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnContextMenuPopUp(SourceGrid2.PositionContextMenuEventArgs)">
            <summary>
            Fired when a context menu is showed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnMouseDown(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnMouseUp(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnMouseMove(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnMouseEnter(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnMouseLeave(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnKeyUp(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnKeyDown(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnKeyPress(SourceGrid2.PositionKeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnDoubleClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnFocusLeaving(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired before the cell leave the focus, you can put the e.Cancel = true to cancel the leave operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnFocusLeft(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the cell has left the focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnFocusEntering(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the focus is entering in the specified cell. You can put the e.Cancel = true to cancel the focus operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnFocusEntered(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the focus enter in the specified cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnValueChanged(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnEditStarting(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the StartEdit is called. You can set the Cancel = true to stop editing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.OnEditEnded(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellVirtual.Invalidate(SourceGrid2.Position)">
            <summary>
            Invalidate the specified position
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="P:SourceGrid2.Cells.ICellVirtual.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICellVirtual.VisualModel">
            <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICellVirtual.CanReceiveFocus">
            <summary>
            True if the cell can have the focus otherwise false. This method simply call BehaviorModel.CanReceiveFocus.
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICellVirtual.DataModel">
            <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICellVirtual.Behaviors">
            <summary>
            Collection of BehaviorModel. Represents the actions of a cell.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.#ctor(System.Type)">
            <summary>
            Create a cell with an editor using the type specified. (using Utility.CreateCellModel).
            </summary>
            <param name="p_Type">Type of the cell</param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.#ctor(SourceGrid2.DataModels.IDataModel)">
            <summary>
            Cell constructor
            </summary>
            <param name="p_Editor">The editor of this cell</param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.#ctor(SourceGrid2.DataModels.IDataModel,SourceGrid2.VisualModels.IVisualModel)">
            <summary>
            Create a new instance of the cell. Using BehaviorModels.Common.Default
            </summary>
            <param name="p_Editor">Formatters used for string conversion, if null is used a shared default formatter.</param>
            <param name="p_VisualModel">Visual properties of the current cell, if null is used a shared default model VisualModels.Common.Default.</param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.#ctor(SourceGrid2.DataModels.IDataModel,SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Create a new instance of the cell.
            </summary>
            <param name="p_Editor">Formatters used for string conversion, if null is used a shared default formatter.</param>
            <param name="p_VisualModel">Visual properties of the current cell, if null is used a shared default model VisualModels.Common.Default.</param>
            <param name="p_BehaviorCommon"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.BindToGrid(SourceGrid2.GridVirtual)">
            <summary>
            Link the cell at the specified grid.
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.UnBindToGrid">
            <summary>
            Remove the link of the cell from the previous grid.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnAddToGrid(System.EventArgs)">
            <summary>
            Fired when the cell is added to a grid
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnRemoveToGrid(System.EventArgs)">
            <summary>
            Fired before a cell is removed from a grid
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.GetValue(SourceGrid2.Position)">
            <summary>
            Get the value of the cell at the specified position
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.SetValue(SourceGrid2.Position,System.Object)">
            <summary>
            Set the value of the cell at the specified position. This method must call OnValueChanged() event.
            </summary>
            <param name="p_Position"></param>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.GetDisplayText(SourceGrid2.Position)">
            <summary>
            The string representation of the Cell.GetValue method (default Value.ToString())
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.Measure(SourceGrid2.Position,System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            If the cell is not linked to a grid the result is not accurate (Font can be null). Call InternalMeasure with RowSpan and ColSpan = 1.
            </summary>
            <param name="p_Position">Position of the current cell</param>
            <param name="g"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.InternalMeasure(SourceGrid2.Position,System.Drawing.Graphics,System.Drawing.SizeF,System.Int32,System.Int32)">
            <summary>
            If the cell is not linked to a grid the result is not accurate (Font can be null)
            </summary>
            <param name="p_Position">Position of the current cell</param>
            <param name="g"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <param name="p_RowSpan"></param>
            <param name="p_ColSpan"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.StartEdit(SourceGrid2.Position,System.Object)">
            <summary>
            Start the edit operation with the current editor specified in the Model property.
            </summary>
            <param name="p_Position"></param>
            <param name="p_NewStartEditValue">The value that the editor receive</param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.StartEdit(SourceGrid2.Position)">
            <summary>
            Start the edit operation with the current editor specified in the Model property.
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.EndEdit(System.Boolean)">
            <summary>
            Terminate the edit operation
            </summary>
            <param name="p_bCancel">If true undo all the changes</param>
            <returns>Returns true if the edit operation is successfully terminated, otherwise false</returns>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.IsEditing(SourceGrid2.Position)">
            <summary>
            True if this cell is currently in edit state, otherwise false.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnContextMenuPopUp(SourceGrid2.PositionContextMenuEventArgs)">
            <summary>
            Fired when a context menu is showed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnMouseDown(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnMouseUp(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnMouseMove(SourceGrid2.PositionMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnMouseEnter(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnMouseLeave(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnKeyUp(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnKeyDown(SourceGrid2.PositionKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnKeyPress(SourceGrid2.PositionKeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnDoubleClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnFocusLeaving(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired before the cell leave the focus, you can put the e.Cancel = true to cancel the leave operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnFocusLeft(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the cell has left the focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnFocusEntering(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the focus is entering in the specified cell. You can put the e.Cancel = true to cancel the focus operation.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnFocusEntered(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the focus enter in the specified cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnValueChanged(SourceGrid2.PositionEventArgs)">
            <summary>
            Fired when the SetValue method is called.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnEditStarting(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the StartEdit is called. You can set the Cancel = true to stop editing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.OnEditEnded(SourceGrid2.PositionCancelEventArgs)">
            <summary>
            Fired when the EndEdit is called. You can read the Cancel property to determine if the edit is completed. If you change the cancel property there is no effect.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.Invalidate">
            <summary>
            Invalidate this cell. For this type of class I must invalidate the whole grid, because I don't known the current cell position.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CellVirtual.Invalidate(SourceGrid2.Position)">
            <summary>
            Invalidate this cell
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.Font">
            <summary>
            If null the default font is used
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.BackColor">
            <summary>
            BackColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.ForeColor">
            <summary>
            ForeColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.Border">
            <summary>
            The normal border of a cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.WordWrap">
            <summary>
            Word Wrap.  This property is only a wrapper around StringFormat
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.TextAlignment">
            <summary>
            Text Alignment. This property is only a wrapper around StringFormat
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.Grid">
            <summary>
            The Grid object
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.VisualModel">
            <summary>
            Visual properties of this cell and other cell. You can share the VisualProperties between many cell to optimize memory size.
            Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.CanReceiveFocus">
            <summary>
            True if the cell can have the focus otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.DataModel">
            <summary>
            Editor of this cell and others cells. If null no edit is supported. 
             You can share the same model between many cells to optimize memory size. Warning Changing this property can affect many cells
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Virtual.CellVirtual.Behaviors">
            <summary>
            Collection of BehaviorModel. This represents the action that a cell can do.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Button.#ctor">
            <summary>
            Constructor. Using VisualModels.Header.Default and BehaviorModels.Button.Default
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Button.#ctor(SourceGrid2.PositionEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="p_Click"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Button.#ctor(SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_VisualModel"></param>
            <param name="p_BehaviorButton"></param>
        </member>
        <member name="T:SourceGrid2.Cells.Real.Button">
            <summary>
            A cell that rappresent a button 
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Real.Cell">
            <summary>
            Represents a Cell in a grid, with Cell.Value support and row/col span. Support also ToolTipText, ContextMenu and Cursor
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.ICell">
            <summary>
            Represents a Cell to use with Grid control.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICell.BindToGrid(SourceGrid2.Grid,SourceGrid2.Position)">
            <summary>
            Link the cell at the specified grid.
            REMARKS: To insert a cell in a grid use Grid.InsertCell, this methos is for internal use only
            </summary>
            <param name="p_grid"></param>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICell.ContainsPosition(SourceGrid2.Position)">
            <summary>
            Returns true if the position specified is inside the current cell range (use Range.Contains).
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICell.Focus">
            <summary>
            Give the focus at the cell
            </summary>
            <returns>Returns if the cell can receive the focus</returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICell.LeaveFocus">
            <summary>
            Remove the focus from the cell
            </summary>
            <returns>Returns true if the cell can leave the focus otherwise false</returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICell.IsEditing">
            <summary>
            True if this cell is currently in edit state, otherwise false.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICell.Invalidate">
            <summary>
            Invalidate this cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.DisplayText">
            <summary>
            The string representation of the Cell.Value property (default Value.ToString())
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.Value">
            <summary>
            Value of the cell 
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.Tag">
            <summary>
            Object to put additional info for this cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.ToolTipText">
            <summary>
            ToolTipText
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.Range">
            <summary>
            Returns the current Row and Col position. If this cell is not attached to the grid returns Position.Empty. And the range occupied by the current cell.
            Returns the Range of the cells occupied by the current cell. If RowSpan and ColSpan = 1 then this method returns a single cell.
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.Row">
            <summary>
            Current Row
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.Column">
            <summary>
            Current Column
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.ColumnSpan">
            <summary>
            ColSpan for merge operation, calculated using the current range.
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.RowSpan">
            <summary>
            RowSpan for merge operation, calculated using the current range.
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.Select">
            <summary>
            Gets or Sets if the current cell is selected
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.ICell.Focused">
            <summary>
            True if the has the focus
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.ICellToolTipText">
            <summary>
            Interface for informations about a tooltiptext
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICellToolTipText.GetToolTipText(SourceGrid2.Position)">
            <summary>
            Get the tooltiptext of the specified cell
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="T:SourceGrid2.Cells.ICellCursor">
            <summary>
            Interface for informations about a cursor
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICellCursor.GetCursor(SourceGrid2.Position)">
            <summary>
            Get the cursor of the specified cell
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="T:SourceGrid2.Cells.ICellContextMenu">
            <summary>
            Interface for informations about a contextmenu
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICellContextMenu.GetContextMenu(SourceGrid2.Position)">
            <summary>
            Get the contextmenu of the specified cell
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.#ctor">
            <summary>
            Cell constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.#ctor(System.Object)">
            <summary>
            Cell constructor, using VisualModels.Common.Default, BehaviorModels.ToolTipText.Default, BehaviorModels.Cursor.Default, BehaviorModels.ContextMenu.Default
            </summary>
            <param name="p_Value">The value of the cell</param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.#ctor(System.Object,System.Type)">
            <summary>
            Create a cell with an editor using the type specified. (using Utility.CreateCellModel).
            </summary>
            <param name="p_Value"></param>
            <param name="p_Type">Type of the cell</param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.#ctor(System.Object,SourceGrid2.DataModels.IDataModel)">
            <summary>
            Cell constructor
            </summary>
            <param name="p_Value">The value of the cell</param>
            <param name="p_Editor">The editor of this cell</param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.#ctor(System.Object,SourceGrid2.DataModels.IDataModel,SourceGrid2.VisualModels.IVisualModel)">
            <summary>
            Create a new instance of the cell.
            </summary>
            <param name="p_Value">Initial value of the cell.</param>
            <param name="p_Editor">Formatters used for string conversion, if null is used a shared default formatter.</param>
            <param name="p_VisualModel">Visual properties of the current cell, if null is used a shared default properties.</param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.#ctor(System.Object,SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel,SourceGrid2.BehaviorModels.IBehaviorModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Cell constructor
            </summary>
            <param name="p_Value">The value of the cell</param>
            <param name="p_VisualModel">Visual properties of the current cell, if null is used a shared default model VisualModels.Common.Default.</param>
            <param name="p_BehaviorToolTipText"></param>
            <param name="p_BehaviorCursor"></param>
            <param name="p_BehaviorContextMenu"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.GetValue(SourceGrid2.Position)">
            <summary>
            Get the value of the current cell
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.SetValue(SourceGrid2.Position,System.Object)">
            <summary>
            Set the value of the cell
            </summary>
            <param name="p_Position"></param>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.GetDisplayText(SourceGrid2.Position)">
            <summary>
            The string representation of the Cell.GetValue method (default Value.ToString()).
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="F:SourceGrid2.Cells.Real.Cell.m_Tag">
            <summary>
            Object to put additional info for this cell
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.ToString">
            <summary>
            ToString method
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.BindToGrid(SourceGrid2.GridVirtual)">
            <summary>
            Link the cell at the specified grid. 
            For Cell derived classes you must call BindToGrid(Grid p_grid, Position p_Position).
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.BindToGrid(SourceGrid2.Grid,SourceGrid2.Position)">
            <summary>
            Link the cell at the specified grid.
            REMARKS: To insert a cell in a grid use Grid.InsertCell, this methos is for internal use only
            </summary>
            <param name="p_grid"></param>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.UnBindToGrid">
            <summary>
            Remove the link of the cell from the previous grid.
            REMARKS: To remove a cell from a grid use the grid.RemoveCell, this method is for internal use only
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.ContainsPosition(SourceGrid2.Position)">
            <summary>
            Returns true if the position specified is inside the current cell range (use Range.Contains)
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.Measure(SourceGrid2.Position,System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            If the cell is not linked to a grid the result is not accurate (Font can be null). Call InternalMeasure with RowSpan and ColSpan
            </summary>
            <param name="p_Position">Position of the current cell</param>
            <param name="g"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.Focus">
            <summary>
            Give the focus at the cell
            </summary>
            <returns>Returns if the cell can receive the focus</returns>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.LeaveFocus">
            <summary>
            Remove the focus from the cell
            </summary>
            <returns>Returns true if the cell can leave the focus otherwise false</returns>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.IsEditing">
            <summary>
            True if this cell is currently in edit state, otherwise false.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.StartEdit(SourceGrid2.Position,System.Object)">
            <summary>
            Start the edit operation with the current editor specified in the Model property. Using the current cell position.
            </summary>
            <param name="p_Position">Not used with this type of class.</param>
            <param name="p_NewStartEditValue">The value that the editor receive</param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.Invalidate">
            <summary>
            Invalidate this cell
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.GetToolTipText(SourceGrid2.Position)">
            <summary>
            Returns the tooltip text for the current cell position. Returns the ToolTipText property.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="F:SourceGrid2.Cells.Real.Cell.m_ContextMenuItems">
            <summary>
            To optimize creation of the cell I create only the collection when we need it
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.GetContextMenu(SourceGrid2.Position)">
            <summary>
            Get the contextmenu of the specified cell
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Cell.GetCursor(SourceGrid2.Position)">
            <summary>
            Get the Cursor property. This is required by the ICellCursor interface.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.DisplayText">
            <summary>
            The string representation of the Cell.Value property (default Value.ToString())
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Value">
            <summary>
            Value of the cell 
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Tag">
            <summary>
            Object to put additional info for this cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Range">
            <summary>
            Returns the current Row and Col position. If this cell is not attached to the grid returns Position.Empty. And the range occupied by the current cell.
            Returns the Range of the cells occupied by the current cell. If RowSpan and ColSpan = 1 then this method returns a single cell.
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Row">
            <summary>
            Current Row
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Column">
            <summary>
            Current Column
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.LocationAbsolute">
            <summary>
            Location absolute to the whole grid
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.LocationRelative">
            <summary>
            Location relative to the current scroll position
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Size">
            <summary>
            Size occupied by the current cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.ColumnSpan">
            <summary>
            ColSpan for merge operation
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.RowSpan">
            <summary>
            RowSpan for merge operation
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Select">
            <summary>
            Gets or Sets if the current cell is selected
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Focused">
            <summary>
            True if the has the focus
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.ToolTipText">
            <summary>
            ToolTipText for the current cell
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.ContextMenuItems">
            <summary>
            Context Menu
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.Cell.Cursor">
            <summary>
            Cursor of the cell
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Button.#ctor(System.Object,SourceGrid2.PositionEventHandler,SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_Click"></param>
            <param name="p_VisualModel"></param>
            <param name="p_BehaviorButton"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Button.#ctor(System.Object,SourceGrid2.PositionEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_Click"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Button.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Button.OnClick(SourceGrid2.PositionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SourceGrid2.Cells.Real.Button.Click">
            <summary>
            Click event
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.CheckBox">
            <summary>
            A Cell with a CheckBox. This Cell is of type bool. Abstract, you must override GetValue and SetValue.
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.ICellCheckBox">
            <summary>
            Interface for informations about a cechkbox
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICellCheckBox.GetCheckedValue(SourceGrid2.Position)">
            <summary>
            Checked status (equal to the Value property but returns a bool). Call the GetValue
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellCheckBox.SetCheckedValue(SourceGrid2.Position,System.Boolean)">
            <summary>
            Set checked value, call the Model.SetCellValue. Can be called only if EnableEdit is true
            </summary>
            <param name="p_Position"></param>
            <param name="p_bChecked"></param>
        </member>
        <member name="M:SourceGrid2.Cells.ICellCheckBox.GetCheckBoxStatus(SourceGrid2.Position)">
            <summary>
            Get the status of the checkbox at the current position
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CheckBox.#ctor">
            <summary>
            Constructor using BehaviorModels.CheckBox.Default
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CheckBox.#ctor(SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_BehaviorCheckBox"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CheckBox.GetCheckedValue(SourceGrid2.Position)">
            <summary>
            Checked status (equal to the Value property but returns a bool). Call the GetValue
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CheckBox.SetCheckedValue(SourceGrid2.Position,System.Boolean)">
            <summary>
            Set checked value, call the Model.SetCellValue. Can be called only if EnableEdit is true
            </summary>
            <param name="p_Position"></param>
            <param name="p_bChecked"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.CheckBox.GetCheckBoxStatus(SourceGrid2.Position)">
            <summary>
            Get the status of the checkbox at the current position
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.Cells.Real.CheckBox">
            <summary>
            A Cell with a CheckBox. This Cell is of type bool. Using BehaviorModels.CheckBox.Default
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.CheckBox.#ctor(System.Boolean)">
            <summary>
            Construct a CellCheckBox class with no caption, and allign the checkbox in MiddleCenter position
            </summary>
            <param name="p_InitialValue"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.CheckBox.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a CellCheckBox class with caption and align checkbox in the MiddleLeft, using BehaviorModels.CheckBox.Default
            </summary>
            <param name="p_Caption"></param>
            <param name="p_InitialValue"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.CheckBox.#ctor(System.String,System.Boolean,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Construct a CellCheckBox class with caption and align checkbox in the MiddleLeft
            </summary>
            <param name="p_Caption"></param>
            <param name="p_InitialValue"></param>
            <param name="p_BehaviorCheckBox"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.CheckBox.GetCheckedValue(SourceGrid2.Position)">
            <summary>
            Checked status (equal to the Value property but returns a bool). Call the GetValue
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.CheckBox.SetCheckedValue(SourceGrid2.Position,System.Boolean)">
            <summary>
            Set checked value, call the Model.SetCellValue. Can be called only if EnableEdit is true
            </summary>
            <param name="p_Position"></param>
            <param name="p_bChecked"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.CheckBox.GetCheckBoxStatus(SourceGrid2.Position)">
            <summary>
            Get the status of the checkbox at the current position
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.Cells.Real.CheckBox.Checked">
            <summary>
            Checked status (equal to the Value property but returns a bool)
            </summary>
        </member>
        <member name="P:SourceGrid2.Cells.Real.CheckBox.Caption">
            <summary>
            Caption of the cell
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.ColumnHeader">
            <summary>
            Class that rapresent a col header with sort and resize feature.
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.Header">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Header.#ctor(SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.ICellSortableHeader">
            <summary>
            Summary description for ICellSortableHeader.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.ICellSortableHeader.GetSortStatus(SourceGrid2.Position)">
            <summary>
            Returns the current sort status
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Cells.ICellSortableHeader.SetSortMode(SourceGrid2.Position,SourceGrid2.GridSortMode)">
            <summary>
            Set the current sort mode
            </summary>
            <param name="p_Position"></param>
            <param name="p_Mode"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.ColumnHeader.#ctor">
            <summary>
            Constructor using VisualModels.Header.ColumnHeader and BehaviorModels.ColumnHeader.SortableHeader
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.ColumnHeader.#ctor(SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Real.ColumnHeader">
            <summary>
            Class that rapresent a col header with sort and resize feature.
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Real.Header">
            <summary>
            A cell that rappresent a header of a table, with 3D effect. This cell override IsSelectable to false. Default use VisualModels.VisualModelHeader.Style1
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Header.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Header.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Header.#ctor(System.Object,SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_VisualModel"></param>
            <param name="p_HeaderBehavior"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.ColumnHeader.#ctor">
            <summary>
            Constructor using VisualModels.Header.ColumnHeader and BehaviorModels.ColumnHeader.SortableHeader
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.ColumnHeader.#ctor(System.Object)">
            <summary>
            Constructor using VisualModels.Header.ColumnHeader and BehaviorModels.ColumnHeader.SortableHeader
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.ColumnHeader.#ctor(System.Object,SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_VisualModel"></param>
            <param name="p_HeaderBehavior"></param>
        </member>
        <member name="P:SourceGrid2.Cells.Real.ColumnHeader.Comparer">
            <summary>
            Comparer used to sort the cells. If null the default comparer is used.
            </summary>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.ComboBox">
            <summary>
            A cell with a combobox for editor. Use a model with a ICollection for standard values.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.ComboBox.#ctor(System.Type,System.Collections.ICollection,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_CellType"></param>
            <param name="p_StandardValues"></param>
            <param name="p_StandardValuesExclusive"></param>
        </member>
        <member name="T:SourceGrid2.Cells.Real.ComboBox">
            <summary>
            A cell with a combobox for editor. Use a model with a ICollection for standard values.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.ComboBox.#ctor(System.Object,System.Type,System.Collections.ICollection,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_CellType"></param>
            <param name="p_StandardValues"></param>
            <param name="p_StandardValuesExclusive"></param>
        </member>
        <member name="F:SourceGrid2.CheckBoxStatus.CheckEnable">
            <summary>
            Enable or disable the checkbox
            </summary>
        </member>
        <member name="F:SourceGrid2.CheckBoxStatus.Checked">
            <summary>
            Checked status
            </summary>
        </member>
        <member name="F:SourceGrid2.CheckBoxStatus.Caption">
            <summary>
            Caption of the CheckBox
            </summary>
        </member>
        <member name="M:SourceGrid2.SortStatus.#ctor(SourceGrid2.GridSortMode,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode">Status of current sort.</param>
            <param name="p_EnableSort">True to enable sort otherwise false</param>
        </member>
        <member name="M:SourceGrid2.SortStatus.#ctor(SourceGrid2.GridSortMode,System.Boolean,System.Collections.IComparer)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode">Status of current sort.</param>
            <param name="p_EnableSort">True to enable sort otherwise false</param>
            <param name="p_Comparer">Comparer used to sort the column. The comparer will take 2 Cell. If null the default ValueCellComparer is used.</param>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.Link">
            <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Link.#ctor">
            <summary>
            Constructor, using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Link.#ctor(SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_VisualModel"></param>
            <param name="p_LinkBehavior"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Link.#ctor(SourceGrid2.PositionEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="p_ExecuteLink">Event to execute when the user Click on this cell</param>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.Link.GetCursor(SourceGrid2.Position)">
            <summary>
            Get the cursor of the specified cell
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="T:SourceGrid2.Cells.Real.Link">
            <summary>
            A cell that contains a HTML style link. Use the click event to execute the link
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Link.#ctor(System.Object)">
            <summary>
            Constructor using VisualModels.Common.LinkStyle and BehaviorModels.Cursor.Default
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Link.#ctor(System.Object,SourceGrid2.PositionEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_ExecuteLink">Event to execute when the user Click on this cell</param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.Link.#ctor(System.Object,SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_VisualModel"></param>
            <param name="p_BehaviorLink"></param>
        </member>
        <member name="T:SourceGrid2.Cells.Virtual.RowHeader">
            <summary>
            Class that rapresent a row header with resize feature.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.RowHeader.#ctor">
            <summary>
            Constructor using VisualModels.Header.RowHeader and BehaviorModels.RowHeader.Default
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Virtual.RowHeader.#ctor(SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_VisualModel"></param>
            <param name="p_BehaviorHeader"></param>
        </member>
        <member name="T:SourceGrid2.Cells.Real.RowHeader">
            <summary>
            Class that rapresent a row header with resize feature.
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.RowHeader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.Cells.Real.RowHeader.#ctor(System.Object)">
            <summary>
            Constructor using VisualModels.Header.RowHeader and BehaviorModels.RowHeader.Default
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="M:SourceGrid2.Cells.Real.RowHeader.#ctor(System.Object,SourceGrid2.VisualModels.IVisualModel,SourceGrid2.BehaviorModels.IBehaviorModel)">
            <summary>
            Constructor
            </summary>
            <param name="p_Value"></param>
            <param name="p_VisualModel"></param>
            <param name="p_HeaderBehavior"></param>
        </member>
        <member name="T:SourceGrid2.Border">
            <summary>
            A struct that represents a single border line.
            If you have 2 adjacent cells and want to create a 1 pixel width border, you must set width 1 for one cell and width 0 for the other. Usually a cell has only Right and Bottom border.
            </summary>
        </member>
        <member name="M:SourceGrid2.Border.Equals(System.Object)">
            <summary>
            Compare to current border with another border.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.RectangleBorder">
            <summary>
            A struct that represents the borders of a cell. Contains 4 borders: Right, Left, Top, Bottom.
            If you have 2 adjacent cells and want to create a 1 pixel width border, you must set width 1 for one cell and width 0 for the other. Usually a cell has only Right and Bottom border.
            </summary>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.#ctor(SourceGrid2.Border)">
            <summary>
            Construct a RectangleBorder with the same border on all the side
            </summary>
            <param name="p_Border"></param>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.#ctor(SourceGrid2.Border,SourceGrid2.Border)">
            <summary>
            Construct a RectangleBorder with the specified Right and Bottom border and a 0 Left and Top border
            </summary>
            <param name="p_Right"></param>
            <param name="p_Bottom"></param>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.#ctor(SourceGrid2.Border,SourceGrid2.Border,SourceGrid2.Border,SourceGrid2.Border)">
            <summary>
            Construct a RectangleBorder with the specified borders
            </summary>
            <param name="p_Top"></param>
            <param name="p_Bottom"></param>
            <param name="p_Left"></param>
            <param name="p_Right"></param>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.SetColor(System.Drawing.Color)">
            <summary>
            Change the color of the current struct instance and return a copy of the modified struct.
            </summary>
            <param name="p_Color"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.SetWidth(System.Int32)">
            <summary>
            Change the width of the current struct instance and return a copy of the modified struct.
            </summary>
            <param name="p_Width"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.Equals(System.Object)">
            <summary>
            Compare to current border with another border.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.RemoveBorderFromRectanlge(System.Drawing.Rectangle)">
            <summary>
            Remove the width of all the borders (top, bottom, left, right) from a specified rectangle
            </summary>
            <param name="p_Input"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.CreateInsetBorder(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create an Inset border
            </summary>
            <param name="p_width"></param>
            <param name="p_ShadowColor"></param>
            <param name="p_LightColor"></param>
        </member>
        <member name="M:SourceGrid2.RectangleBorder.CreateRaisedBorder(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create a Raised border
            </summary>
            <param name="p_width"></param>
            <param name="p_ShadowColor"></param>
            <param name="p_LightColor"></param>
        </member>
        <member name="T:SourceGrid2.CellVirtualCollection">
            <summary>
            A collection of elements of type ICellVirtual
            </summary>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.#ctor">
            <summary>
            Initializes a new empty instance of the CellBaseCollection class.
            </summary>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.#ctor(SourceGrid2.Cells.ICellVirtual[])">
            <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.#ctor(SourceGrid2.CellVirtualCollection)">
            <summary>
            Initializes a new instance of the CellBaseCollection class, containing elements
            copied from another instance of CellBaseCollection
            </summary>
            <param name="items">
            The CellBaseCollection whose elements are to be added to the new CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.AddRange(SourceGrid2.Cells.ICellVirtual[])">
            <summary>
            Adds the elements of an array to the end of this CellBaseCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.AddRange(SourceGrid2.CellVirtualCollection)">
            <summary>
            Adds the elements of another CellBaseCollection to the end of this CellBaseCollection.
            </summary>
            <param name="items">
            The CellBaseCollection whose elements are to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.Add(SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Adds an instance of type ICellVirtual to the end of this CellBaseCollection.
            </summary>
            <param name="value">
            The ICellVirtual to be added to the end of this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.Contains(SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Determines whether a specfic ICellVirtual value is in this CellBaseCollection.
            </summary>
            <param name="value">
            The ICellVirtual value to locate in this CellBaseCollection.
            </param>
            <returns>
            true if value is found in this CellBaseCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.IndexOf(SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this CellBaseCollection
            </summary>
            <param name="value">
            The ICellVirtual value to locate in the CellBaseCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.Insert(System.Int32,SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Inserts an element into the CellBaseCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ICellVirtual is to be inserted.
            </param>
            <param name="value">
            The ICellVirtual to insert.
            </param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.Remove(SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Removes the first occurrence of a specific ICellVirtual from this CellBaseCollection.
            </summary>
            <param name="value">
            The ICellVirtual value to remove from this CellBaseCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this CellBaseCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:SourceGrid2.CellVirtualCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ICellVirtual at the given index in this CellBaseCollection.
            </summary>
        </member>
        <member name="T:SourceGrid2.CellVirtualCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by CellBaseCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.Enumerator.#ctor(SourceGrid2.CellVirtualCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.CellVirtualCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid2.CellVirtualCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid2.CellVirtualCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:SourceGrid2.ColumnInfo">
            <summary>
            Column Information
            </summary>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.#ctor(SourceGrid2.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.Focus">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current column otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size the current column with the max required width of all cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <param name="StartRow">Start row to measure</param>
            <param name="EndRow">End row to measure</param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.AutoSize(System.Boolean)">
            <summary>
            Auto size the current column with the max required width of all cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.Measure(System.Boolean)">
            <summary>
            Measures the current column when drawn with the specified cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <returns>Returns the minimum width</returns>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.Measure(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Measures the current column when drawn with the specified cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <param name="StartRow">Start row to measure</param>
            <param name="EndRow">End row to measure</param>
            <returns>Returns the minimum width</returns>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Width">
            <summary>
            Width of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Left">
            <summary>
            Left absolute position of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Right">
            <summary>
            Right of the column (Left+Width)
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Index">
            <summary>
            Index of the current Column
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Cells">
            <summary>
            Gets or sets the cells at the specified column
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Select">
            <summary>
            Gets or sets if the current row is selected. If only a column of the row is selected this property returns true.
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.Tag">
            <summary>
            A property that the user can use to insert custom informations associated to a specific column
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.AutoSizeMode">
            <summary>
            Flags for autosize and stretch
            </summary>
        </member>
        <member name="T:SourceGrid2.ColumnInfo.ColumnInfoCollection">
            <summary>
            Collection of ColumnInfo
            </summary>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.#ctor(SourceGrid2.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.ColumnAtPoint(System.Int32)">
            <summary>
            Calculate the Column that have the Left value smaller or equal than the point p_X, or -1 if not found found. ExactMatch = false
            </summary>
            <param name="p_X">Absolute point to search</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.ColumnAtPoint(System.Int32,System.Boolean)">
            <summary>
            Calculate the Column that have the Left value smaller or equal than the point p_X, or -1 if not found found.
            </summary>
            <param name="p_X">X Coordinate to search for a column</param>
            <param name="p_ExactMatch">True to returns only exact position. For example if you use a point outside the range and this value is true no column is returned otherwise the nearest column is returned.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.IsValidRange(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid for insert method
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.Insert(System.Int32,SourceGrid2.Cells.ICellVirtual[])">
            <summary>
            Insert a column at the specified position using the specified cells
            </summary>
            <param name="p_Index"></param>
            <param name="p_Cells">The new column values</param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.Insert(System.Int32)">
            <summary>
            Insert a column at the specified position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.Remove(System.Int32)">
            <summary>
            Remove a column at the speicifed position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.InsertRange(System.Int32,System.Int32)">
            <summary>
            Insert the specified number of Columns at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove the ColumnInfo at the specified positions
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move a column from one position to another position
            </summary>
            <param name="p_CurrentColumnPosition"></param>
            <param name="p_NewColumnPosition"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Change the position of column 1 with column 2.
            </summary>
            <param name="p_ColumnIndex1"></param>
            <param name="p_ColumnIndex2"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.OnColumnsAdded(SourceGrid2.IndexRangeEventArgs)">
            <summary>
            Fired when the number of columns change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.OnColumnsRemoved(SourceGrid2.IndexRangeEventArgs)">
            <summary>
            Fired when some columns are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.OnColumnsRemoving(SourceGrid2.IndexRangeEventArgs)">
            <summary>
            Fired before some columns are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.CalculateLeft(System.Int32)">
            <summary>
            Recalculate all the Left positions from the specified index
            </summary>
            <param name="p_StartIndex"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.InvokeColumnWidthChanged(SourceGrid2.ColumnInfoEventArgs)">
            <summary>
            Execute the RowHeightChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size all the columns with the max required width of all cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
            <param name="StartRow">Start row to measure</param>
            <param name="EndRow">End row to measure</param>
        </member>
        <member name="M:SourceGrid2.ColumnInfo.ColumnInfoCollection.AutoSize(System.Boolean)">
            <summary>
            Auto size all the columns with the max required width of all cells.
            </summary>
            <param name="useRowHeight">True to fix the row height when measure the column width.</param>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.ColumnInfoCollection.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="E:SourceGrid2.ColumnInfo.ColumnInfoCollection.ColumnsAdded">
            <summary>
            Fired when the number of columns change
            </summary>
        </member>
        <member name="E:SourceGrid2.ColumnInfo.ColumnInfoCollection.ColumnsRemoved">
            <summary>
            Fired when some columns are removed
            </summary>
        </member>
        <member name="E:SourceGrid2.ColumnInfo.ColumnInfoCollection.ColumnsRemoving">
            <summary>
            Fired before some columns are removed
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.ColumnInfoCollection.Item(System.Int32)">
            <summary>
            Indexer. Returns a ColumnInfo at the specified position
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.ColumnInfoCollection.Right">
            <summary>
            Returns the maximum right value of the columns. Calculated with Columns[lastCol].Right or 0 if no columns are presents.
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.ColumnInfoCollection.Left">
            <summary>
            Returns the minimum left value of the columns. Calculated with Columns[0].Left or 0 if no columns are presents.
            </summary>
        </member>
        <member name="E:SourceGrid2.ColumnInfo.ColumnInfoCollection.ColumnWidthChanged">
            <summary>
            Fired when the user change the Width property of one of the Column
            </summary>
        </member>
        <member name="P:SourceGrid2.ColumnInfo.ColumnInfoCollection.AutoCalculateLeft">
            <summary>
            Indicates if auto recalculate left position when width value change. Default = true. Can be used when you need to change many Width value for example for an AutoSize operation to increase performance.
            </summary>
        </member>
        <member name="T:SourceGrid2.CustomScrollControl">
            <summary>
            A control with a custom implementation of a scrollable area
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.InvalidateScrollableArea">
            <summary>
            Invalidate the scrollable area
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.RectangleAbsoluteToRelative(System.Drawing.Rectangle)">
            <summary>
            Convert an absolute rectangle from the total scrolling area to the current displayrectangle.
            </summary>
            <param name="p_AbsoluteRectangle"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.RectangleRelativeToAbsolute(System.Drawing.Rectangle)">
            <summary>
            Convert a relative rectangle from the current displayrectangle to an absolute rectangle for the current scrolling area.
            </summary>
            <param name="p_RelativeRectangle"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.PointRelativeToAbsolute(System.Drawing.Point)">
            <summary>
            Convert a relative point from the current displayrectangle to an absolute point to the total scrolling area.
            </summary>
            <param name="p_RelativePoint"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.PointAbsoluteToRelative(System.Drawing.Point)">
            <summary>
            Convert a absolute point from an absolute point to the current displayrectangle of the grid.
            </summary>
            <param name="p_AbsolutePoint"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.RemoveHScrollBar">
            <summary>
            Remove the horizontal scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.RemoveVScrollBar">
            <summary>
            Remove the vertical scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.InsertHScrollBar">
            <summary>
            Insert the horizontal scroll bar
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.InsertVScrollBar">
            <summary>
            Insert the vertical scroll bar
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.RecalcHScrollBar">
            <summary>
            recalculate the position of the horizontal scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.RecalcVScrollBar">
            <summary>
            Recalculate the position of the vertical scrollbar
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.RecalcCustomScrollBars">
            <summary>
            Recalculate the scrollbars position and size
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            OnLayout Method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.OnVScrollPositionChanged(SourceGrid2.ScrollPositionChangedEventArgs)">
            <summary>
            Fired when the scroll vertical posizion change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.OnHScrollPositionChanged(SourceGrid2.ScrollPositionChangedEventArgs)">
            <summary>
            Fired when the scroll horizontal posizion change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollPageDown">
            <summary>
            Scroll the page down
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollPageUp">
            <summary>
            Scroll the page up
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollPageRight">
            <summary>
            Scroll the page right
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollPageLeft">
            <summary>
            Scroll the page left
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollLineDown">
            <summary>
            Scroll the page down one line
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollLineUp">
            <summary>
            Scroll the page up one line
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollLineRight">
            <summary>
            Scroll the page right one line
            </summary>
        </member>
        <member name="M:SourceGrid2.CustomScrollControl.CustomScrollLineLeft">
            <summary>
            Scroll the page left one line
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.AutoScroll">
            <summary>
            I disabled the default AutoScroll property because I have a custom implementation
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.VScrollBar">
            <summary>
            Represent the vertical scrollbar. Can be null.
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.HScrollBar">
            <summary>
            Represent the horizontal scrollbar. Can be null.
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.BottomRightPanel">
            <summary>
            Represent the panel at the bottom right of the control. This panel is valid only if HScrollBar and VScrollBar are valid. Otherwise is null.
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.CustomScrollArea">
            <summary>
            Represent the logical area of the control that must be used for scrolling
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.CustomScrollPosition">
            <summary>
            Represent the current scroll position relative to the CustomScrollArea. The value must be always between 0 and - CustomScrollArea (0 or negative).
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.DisplayRectangle">
            <summary>
            Display rectangle of the control, without ScrollBars
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.MaximumVScroll">
            <summary>
            Return the maximum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.MinimumVScroll">
            <summary>
            Return the minimum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.MinimumHScroll">
            <summary>
            Return the minimum position that can be scrolled
            </summary>
        </member>
        <member name="P:SourceGrid2.CustomScrollControl.MaximumHScroll">
            <summary>
            Return the maximum position that can be scrolled
            </summary>
        </member>
        <member name="E:SourceGrid2.CustomScrollControl.VScrollPositionChanged">
            <summary>
            Fired when the scroll vertical posizion change
            </summary>
        </member>
        <member name="E:SourceGrid2.CustomScrollControl.HScrollPositionChanged">
            <summary>
            Fired when the scroll horizontal posizion change
            </summary>
        </member>
        <member name="T:SourceGrid2.GridSelectionMode">
            <summary>
            Selection Mode
            </summary>
        </member>
        <member name="T:SourceGrid2.GridSortMode">
            <summary>
            Sort Mode
            </summary>
        </member>
        <member name="T:SourceGrid2.ContextMenuStyle">
            <summary>
            ContextMenuStyle (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid2.EditableMode">
            <summary>
            EditableMode Cell mode (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid2.EditableMode.None">
            <summary>
            No edit support
            </summary>
        </member>
        <member name="F:SourceGrid2.EditableMode.F2Key">
            <summary>
            Edit the cell with F2 key ( 1 )
            </summary>
        </member>
        <member name="F:SourceGrid2.EditableMode.DoubleClick">
            <summary>
            Edit the cell with a double click (2)
            </summary>
        </member>
        <member name="F:SourceGrid2.EditableMode.SingleClick">
            <summary>
            Edit a cell with a single Key (4)
            </summary>
        </member>
        <member name="F:SourceGrid2.EditableMode.AnyKey">
            <summary>
            Edit the cell pressing any keys (8 + F2Key)
            </summary>
        </member>
        <member name="F:SourceGrid2.EditableMode.Focus">
            <summary>
            Edit the cell when it receive the focus (16)
            </summary>
        </member>
        <member name="F:SourceGrid2.EditableMode.Default">
            <summary>
            DoubleClick + F2Key
            </summary>
        </member>
        <member name="T:SourceGrid2.CellResizeMode">
            <summary>
            Type of resize of the cells (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid2.ExportHTMLMode">
            <summary>
            Flags for the export html features (Flags)
            </summary>
        </member>
        <member name="T:SourceGrid2.GridSpecialKeys">
            <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.None">
            <summary>
            No keys
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Ctrl_C">
            <summary>
            Ctrl+C for Copy selection operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Ctrl_V">
            <summary>
            Ctrl+V for paste selection operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Ctrl_X">
            <summary>
            Ctrl+X for cut selection operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Delete">
            <summary>
            Delete key, for Clear selection operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Arrows">
            <summary>
            Arrows keys, for moving focus cell operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Tab">
            <summary>
            Tab and Shift+Tab keys, for moving focus cell operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.PageDownUp">
            <summary>
            PageDown and PageUp keys, for page operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Enter">
            <summary>
            Enter key, for apply editing operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Escape">
            <summary>
            Escape key, for cancel editing operation
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Control">
            <summary>
            Control key, for selection operations. Enables the selection of non adjacent cells
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Shift">
            <summary>
            Shift key, for selection operations. Enables the selection of the range from the focused cell to the selected cells.
            </summary>
        </member>
        <member name="F:SourceGrid2.GridSpecialKeys.Default">
            <summary>
            Default: Arrows|Ctrl_C|Ctrl_V|Ctrl_X|Delete|Tab|PageDownUp
            </summary>
        </member>
        <member name="T:SourceGrid2.CellPositionType">
            <summary>
            Position type of the cell. Look at the .vsd diagram for details.
            </summary>
        </member>
        <member name="F:SourceGrid2.CellPositionType.Empty">
            <summary>
            Empty Cell
            </summary>
        </member>
        <member name="F:SourceGrid2.CellPositionType.FixedTopLeft">
            <summary>
            Fixed Top+Left Cell
            </summary>
        </member>
        <member name="F:SourceGrid2.CellPositionType.FixedTop">
            <summary>
            Fixed Top Cell
            </summary>
        </member>
        <member name="F:SourceGrid2.CellPositionType.FixedLeft">
            <summary>
            Fixed Left cell
            </summary>
        </member>
        <member name="F:SourceGrid2.CellPositionType.Scrollable">
            <summary>
            Scrollable Cell
            </summary>
        </member>
        <member name="T:SourceGrid2.SelectionChangeEventType">
            <summary>
            SelectionChangeEventType
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionChangeEventType.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionChangeEventType.Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionChangeEventType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="T:SourceGrid2.FocusStyle">
            <summary>
            FocusStyle (Flags). Used to customize the style of the focus.
            </summary>
        </member>
        <member name="F:SourceGrid2.FocusStyle.RemoveFocusCellOnLeave">
            <summary>
            Remove the focus cell when the grid lost the focus
            </summary>
        </member>
        <member name="F:SourceGrid2.FocusStyle.RemoveSelectionOnLeave">
            <summary>
            Remove the selection when the grid lost the focus
            </summary>
        </member>
        <member name="F:SourceGrid2.FocusStyle.Default">
            <summary>
            The default value for this flags: None
            </summary>
        </member>
        <member name="T:SourceGrid2.AutoSizeMode">
            <summary>
            AutoSizeMode (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid2.AutoSizeMode.EnableAutoSize">
            <summary>
            Enable the AutoSize
            </summary>
        </member>
        <member name="F:SourceGrid2.AutoSizeMode.EnableStretch">
            <summary>
            Enable Stretch operation
            </summary>
        </member>
        <member name="F:SourceGrid2.AutoSizeMode.MinimumSize">
            <summary>
            If this flag is selected the Measure function returns always the minimum column/row size and don't calculate the real required size. This flag can be used to don't consider the content of a column/row
            </summary>
        </member>
        <member name="F:SourceGrid2.AutoSizeMode.Default">
            <summary>
            Default: EnableAutoSize, EnableStretch
            </summary>
        </member>
        <member name="T:SourceGrid2.SelectionBorderMode">
            <summary>
            SelectionBorderMode. Used with Grid.Selection.BorderMode property
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionBorderMode.None">
            <summary>
            Don't draw a border around each selection range
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionBorderMode.Selection">
            <summary>
            Draw a border around each selection range
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionBorderMode.Auto">
            <summary>
            Draw a border around the selection range only is there is only one range selected or around the focus cell
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionBorderMode.FocusCell">
            <summary>
            Draw a border around the focusl cell
            </summary>
        </member>
        <member name="T:SourceGrid2.SelectionMaskStyle">
            <summary>
            SelectionmaskStyle, used to customize the visual style of the selection mask. (Flags)
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionMaskStyle.None">
            <summary>
            None. No special flags
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionMaskStyle.DrawOnlyInitializedCells">
            <summary>
            Used to draw only initialized cells. If you have uninitialized cell (you don't create a cell for a specific position: grid[0,0] = null;) the selection mask is not drawed on this cell. Consider that with this flags the drawing method is more complex and slow.If you use this flag the border can only be set to FocusCell or None.
            </summary>
        </member>
        <member name="F:SourceGrid2.SelectionMaskStyle.Default">
            <summary>
            Default value: None
            </summary>
        </member>
        <member name="T:SourceGrid2.RowEventArgs">
            <summary>
            EventArgs used by the FocusRowEnter
            </summary>
        </member>
        <member name="M:SourceGrid2.RowEventArgs.#ctor(SourceGrid2.RowInfo)">
            <summary>
            Constructor
            </summary>
            <param name="pRow"></param>
        </member>
        <member name="P:SourceGrid2.RowEventArgs.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="T:SourceGrid2.RowEventHandler">
            <summary>
            EventHandler used by the FocusRowEnter
            </summary>
        </member>
        <member name="T:SourceGrid2.RowCancelEventArgs">
            <summary>
            EventArgs used by the FocusRowLeaving
            </summary>
        </member>
        <member name="M:SourceGrid2.RowCancelEventArgs.#ctor(SourceGrid2.RowInfo)">
            <summary>
            Constructor
            </summary>
            <param name="pRow"></param>
        </member>
        <member name="P:SourceGrid2.RowCancelEventArgs.Cancel">
            <summary>
            Row
            </summary>
        </member>
        <member name="T:SourceGrid2.RowCancelEventHandler">
            <summary>
            EventHandler used by the FocusRowLeaving
            </summary>
        </member>
        <member name="T:SourceGrid2.ColumnEventArgs">
            <summary>
            EventArgs used by the FocusColumnEnter
            </summary>
        </member>
        <member name="M:SourceGrid2.ColumnEventArgs.#ctor(SourceGrid2.ColumnInfo)">
            <summary>
            Constructor
            </summary>
            <param name="pColumn"></param>
        </member>
        <member name="P:SourceGrid2.ColumnEventArgs.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="T:SourceGrid2.ColumnEventHandler">
            <summary>
            EventHandled used by the FocusColumnEnter
            </summary>
        </member>
        <member name="T:SourceGrid2.ColumnCancelEventArgs">
            <summary>
            EventArgs used by the FocusColumnLeaving
            </summary>
        </member>
        <member name="M:SourceGrid2.ColumnCancelEventArgs.#ctor(SourceGrid2.ColumnInfo)">
            <summary>
            Constructor
            </summary>
            <param name="pColumn"></param>
        </member>
        <member name="P:SourceGrid2.ColumnCancelEventArgs.Cancel">
            <summary>
            Column
            </summary>
        </member>
        <member name="T:SourceGrid2.ColumnCancelEventHandler">
            <summary>
            EventHandled used by the FocusColumnLeave and FocusColumnEnter
            </summary>
        </member>
        <member name="T:SourceGrid2.PositionCancelEventArgs">
            <summary>
            EventArgs that represents a cell position and a cancel parameters. Extends PositionEventArgs
            </summary>
        </member>
        <member name="M:SourceGrid2.PositionCancelEventArgs.#ctor(SourceGrid2.Position,SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Position"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="P:SourceGrid2.PositionCancelEventArgs.Cancel">
            <summary>
            Cancel parameter: default is false
            </summary>
        </member>
        <member name="T:SourceGrid2.PositionCancelEventHandler">
            <summary>
            PositionCancel Event Handler.
            </summary>
        </member>
        <member name="T:SourceGrid2.CellLostFocusEventArgs">
            <summary>
            Cell Lost Focus event arguments with the old position and the new position. Extends PositionCancelEventArgs.
            </summary>
        </member>
        <member name="M:SourceGrid2.CellLostFocusEventArgs.#ctor(SourceGrid2.Position,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position)">
            <summary>
            Constructor
            </summary>
            <param name="pPositionLostFocus"></param>
            <param name="pCellLostFocus"></param>
            <param name="pNewFocusPosition">If Empty there isn't a cell that will receive the focus.</param>
        </member>
        <member name="P:SourceGrid2.CellLostFocusEventArgs.NewFocusPosition">
            <summary>
            Position that will receive the focus. If Empty there isn't a cell that will receive the focus.
            </summary>
        </member>
        <member name="T:SourceGrid2.CellLostFocusEventHandler">
            <summary>
            Cell Lost Focus event handler
            </summary>
        </member>
        <member name="T:SourceGrid2.CellGotFocusEventArgs">
            <summary>
            Cell Got Focus event arguments with the old position and the new position. Extends PositionCancelEventArgs.
            </summary>
        </member>
        <member name="P:SourceGrid2.CellGotFocusEventArgs.OldFocusPosition">
            <summary>
            Position that previous has the focus. If Empty there is no cell with the focus..
            </summary>
        </member>
        <member name="T:SourceGrid2.CellGotFocusEventHandler">
            <summary>
            Cell Lost Focus event handler
            </summary>
        </member>
        <member name="T:SourceGrid2.frmCellSize">
            <summary>
            Summary description for frmCellSize.
            </summary>
        </member>
        <member name="F:SourceGrid2.frmCellSize.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SourceGrid2.frmCellSize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SourceGrid2.frmCellSize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SourceGrid2.GridContextMenu">
            <summary>
            A class derived from ContextMenu but that is syncronized with the grid using the ContextMenuStyle property
            </summary>
        </member>
        <member name="M:SourceGrid2.GridContextMenu.#ctor(SourceGrid2.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid">The grid to sync with</param>
        </member>
        <member name="M:SourceGrid2.GridContextMenu.OnPopup(System.EventArgs)">
            <summary>
            Fired when the contextmenu is showed
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid2.GridContextMenu.Grid">
            <summary>
            Grid to sync
            </summary>
        </member>
        <member name="T:SourceGrid2.GridPaint">
            <summary>
            Class with some static methods for painting cells, grid and borders
            </summary>
        </member>
        <member name="M:SourceGrid2.GridPaint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.GridPaint.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,SourceGrid2.RectangleBorder)">
            <summary>
            Draw a border
            </summary>
            <param name="graphics"></param>
            <param name="rectangle"></param>
            <param name="border"></param>
        </member>
        <member name="M:SourceGrid2.GridPaint.DrawImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,SourceLibrary.Drawing.ContentAlignment,System.Boolean,System.String,System.Drawing.StringFormat,System.Boolean,SourceGrid2.RectangleBorder,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Paint the Text and the Image passed
            </summary>
            <param name="g">Graphics device where you can render your image and text</param>
            <param name="p_displayRectangle">Relative rectangle based on the display area</param>
            <param name="p_Image">Image to draw. Can be null.</param>
            <param name="p_ImageAlignment">Alignment of the image</param>
            <param name="p_ImageStretch">True to make the draw the image with the same size of the cell</param>
            <param name="p_Text">Text to draw (can be null)</param>
            <param name="p_StringFormat">String format (can be null)</param>
            <param name="p_AlignTextToImage">True to align the text with the image</param>
            <param name="p_Border">Cell Border</param>
            <param name="p_TextColor">Text Color</param>
            <param name="p_TextFont">Text Font(can be null)</param>
        </member>
        <member name="T:SourceGrid2.GridSubPanel">
            <summary>
            Summary description for GridSubPanel.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.#ctor(SourceGrid2.GridVirtual,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="p_GridContainer"></param>
            <param name="p_CustomDraw">True to use custom draw function.</param>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Allow the grid to handle specials keys like Arrows and Tab. See also Grid.SpecialKeys
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.PositionAtPointGrid(System.Drawing.Point)">
            <summary>
            Returns the cell at the specified grid view relative point (the point must be relative to the grid display region not to the panel display region)
            </summary>
            <param name="p_RelativeViewPoint">Point</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.RangeAtDisplayRect(System.Drawing.Rectangle)">
            <summary>
            Returns a range of cells from the specified rectangle, relative to the current grid container, using scrolling information.
            </summary>
            <param name="p_RelativeRect">A grid relative rectangle (not panel relative)</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.RangeAtAbsRect(System.Drawing.Rectangle)">
            <summary>
            Returns a range of cells from the specified absolute rectangle. Returns Empty if no valid cells are found.
            </summary>
            <param name="p_AbsoluteRect"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.PointGridToPanel(System.Drawing.Point)">
            <summary>
            Convert a grid relative point to a panel relative point
            </summary>
            <param name="p_GridPoint"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.PointPanelToGrid(System.Drawing.Point)">
            <summary>
            Convert a panel relative point to a grid relative point
            </summary>
            <param name="p_PanelPoint"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.RectanglePanelToGrid(System.Drawing.Rectangle)">
            <summary>
            Converts a panel coordinate rectangle to Grid coordinate rectangle
            </summary>
            <param name="p_PanelRectangle"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridSubPanel.RectangleGridToPanel(System.Drawing.Rectangle)">
            <summary>
            Converts a grid coordinate rectangle to Panel coordinate rectangle
            </summary>
            <param name="p_GridRectangle"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.GridSubPanel.Grid">
            <summary>
            Grid
            </summary>
        </member>
        <member name="P:SourceGrid2.GridSubPanel.CompleteRange">
            <summary>
            Returns a Range that represents the complete cells of the panel
            </summary>
        </member>
        <member name="P:SourceGrid2.GridSubPanel.ToolTipText">
            <summary>
            ToolTip text
            </summary>
        </member>
        <member name="P:SourceGrid2.GridSubPanel.ToolTipActive">
            <summary>
            ToolTip active
            </summary>
        </member>
        <member name="P:SourceGrid2.GridSubPanel.ControlsRepository">
            <summary>
            A collection of controls used for editing operations
            </summary>
        </member>
        <member name="T:SourceGrid2.Position">
            <summary>
            Represents a cell position (Row, Col). Once created connot be modified
            </summary>
        </member>
        <member name="F:SourceGrid2.Position.c_EmptyIndex">
            <summary>
            An empty index constant
            </summary>
        </member>
        <member name="M:SourceGrid2.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="p_Row"></param>
            <param name="p_Col"></param>
        </member>
        <member name="F:SourceGrid2.Position.Empty">
            <summary>
            Empty position
            </summary>
        </member>
        <member name="M:SourceGrid2.Position.IsEmpty">
            <summary>
            Returns true if the current struct is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.Equals(SourceGrid2.Position)">
            <summary>
            
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.op_Equality(SourceGrid2.Position,SourceGrid2.Position)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.op_Inequality(SourceGrid2.Position,SourceGrid2.Position)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.MergeMinor(SourceGrid2.Position,SourceGrid2.Position)">
            <summary>
            Returns a position with the smaller Row and the smaller column
            </summary>
            <param name="p_Position1"></param>
            <param name="p_Position2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Position.MergeMajor(SourceGrid2.Position,SourceGrid2.Position)">
            <summary>
            Returns a position with the bigger Row and the bigger column
            </summary>
            <param name="p_Position1"></param>
            <param name="p_Position2"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.Position.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="P:SourceGrid2.Position.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="T:SourceGrid2.Range">
            <summary>
            Represents range of cells. Once created connot be modified. This Range has always Start in the Top-Left, and End in the Bottom-Right (see Normalize method).
            </summary>
        </member>
        <member name="M:SourceGrid2.Range.#ctor(SourceGrid2.Position,SourceGrid2.Position)">
            <summary>
            Constructor
            </summary>
            <param name="p_Start"></param>
            <param name="p_End"></param>
        </member>
        <member name="M:SourceGrid2.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="p_StartRow"></param>
            <param name="p_StartCol"></param>
            <param name="p_EndRow"></param>
            <param name="p_EndCol"></param>
        </member>
        <member name="M:SourceGrid2.Range.MoveTo(SourceGrid2.Position)">
            <summary>
            Move the current range to the specified position, leaving the current ColumnsCount and RowsCount
            </summary>
            <param name="p_StartPosition"></param>
        </member>
        <member name="M:SourceGrid2.Range.#ctor(SourceGrid2.Position)">
            <summary>
            Construct a Range of a single cell
            </summary>
            <param name="p_SinglePosition"></param>
        </member>
        <member name="F:SourceGrid2.Range.Empty">
            <summary>
            Represents an empty range
            </summary>
        </member>
        <member name="M:SourceGrid2.Range.Normalize">
            <summary>
            Check and fix the range to always have Start smaller than End
            </summary>
        </member>
        <member name="M:SourceGrid2.Range.ContainsRow(System.Int32)">
            <summary>
            Returns true if the specified row is present in the current range.
            </summary>
            <param name="p_Row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.ContainsColumn(System.Int32)">
            <summary>
            Returns true if the specified column is present in the current range.
            </summary>
            <param name="p_Col"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.Contains(SourceGrid2.Position)">
            <summary>
            Returns true if the specified cell position is present in the current range.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.Contains(SourceGrid2.Range)">
            <summary>
            Returns true if the specified range is present in the current range.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.IsEmpty">
            <summary>
            Determines if the current range is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.op_Equality(SourceGrid2.Range,SourceGrid2.Range)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.op_Inequality(SourceGrid2.Range,SourceGrid2.Range)">
            <summary>
            
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.Equals(SourceGrid2.Range)">
            <summary>
            
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.GetCellsPositions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.Union(SourceGrid2.Range,SourceGrid2.Range)">
            <summary>
            Returns a range with the smaller Start and the bigger End. The Union of the 2 Range. If one of the range is empty then the return is the other range.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.Intersect(SourceGrid2.Range,SourceGrid2.Range)">
            <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.Intersect(SourceGrid2.Range)">
            <summary>
            Returns the intersection between the 2 Range. If one of the range is empty then the return is empty.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.IntersectsWith(SourceGrid2.Range,SourceGrid2.Range)">
            <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
            <param name="p_Range1"></param>
            <param name="p_Range2"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Range.IntersectsWith(SourceGrid2.Range)">
            <summary>
            Returns true if the specified range intersects (one or more cells) with the current range.
            If one of the range is empty then the return is false.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.Range.ColumnsCount">
            <summary>
            Sets or Gets the columns count (End.Column-Start.Column)
            </summary>
        </member>
        <member name="P:SourceGrid2.Range.RowsCount">
            <summary>
            Sets or Gets the rows count (End.Row-Start.Row)
            </summary>
        </member>
        <member name="T:SourceGrid2.IRangeLoader">
            <summary>
            Interface that rappresent a range of the grid. (RangeFullGridNoFixedRows, RangeFullGridNoFixedCols, RangeFixedRows, RangeFixedCols, Range)
            </summary>
        </member>
        <member name="M:SourceGrid2.IRangeLoader.GetRange(SourceGrid2.GridVirtual)">
            <summary>
            Rectangle that contains the range.
            </summary>
        </member>
        <member name="T:SourceGrid2.RangeFullGrid">
            <summary>
            Represents a range that contains all the grid
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFullGrid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFullGrid.GetRange(SourceGrid2.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.RangeFullGridNoFixedRows">
            <summary>
            Represents a range that contains all the grid with no fixed rows
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFullGridNoFixedRows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFullGridNoFixedRows.GetRange(SourceGrid2.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.RangeFullGridNoFixedCols">
            <summary>
            Represents a range that contains all the grid with no fixed cols
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFullGridNoFixedCols.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFullGridNoFixedCols.GetRange(SourceGrid2.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.RangeFixedRows">
            <summary>
            Represents a range that contains only fixed rows
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFixedRows.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFixedRows.GetRange(SourceGrid2.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.RangeFixedCols">
            <summary>
            Represents a range that contains only fixed cols
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFixedCols.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeFixedCols.GetRange(SourceGrid2.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.RangeLoader">
            <summary>
            Range custom
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeLoader.#ctor(SourceGrid2.Range)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.RangeLoader.GetRange(SourceGrid2.GridVirtual)">
            <summary>
            Returns the Range struct from the specific instance
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.RangeLoader.CellRange">
            <summary>
            Range
            </summary>
        </member>
        <member name="T:SourceGrid2.GridRangeCollection">
            <summary>
            A collection of elements of type Range
            </summary>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.#ctor">
            <summary>
            Initializes a new empty instance of the GridRangeCollection class.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.#ctor(SourceGrid2.Range[])">
            <summary>
            Initializes a new instance of the GridRangeCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new GridRangeCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.#ctor(SourceGrid2.GridRangeCollection)">
            <summary>
            Initializes a new instance of the GridRangeCollection class, containing elements
            copied from another instance of GridRangeCollection
            </summary>
            <param name="items">
            The GridRangeCollection whose elements are to be added to the new GridRangeCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.AddRange(SourceGrid2.Range[])">
            <summary>
            Adds the elements of an array to the end of this GridRangeCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this GridRangeCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.AddRange(SourceGrid2.GridRangeCollection)">
            <summary>
            Adds the elements of another GridRangeCollection to the end of this GridRangeCollection.
            </summary>
            <param name="items">
            The GridRangeCollection whose elements are to be added to the end of this GridRangeCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.Add(SourceGrid2.Range)">
            <summary>
            Adds an instance of type Range to the end of this GridRangeCollection.
            </summary>
            <param name="value">
            The Range to be added to the end of this GridRangeCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.Contains(SourceGrid2.Range)">
            <summary>
            Determines whether a specfic Range value is in this GridRangeCollection.
            </summary>
            <param name="value">
            The Range value to locate in this GridRangeCollection.
            </param>
            <returns>
            true if value is found in this GridRangeCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.IndexOf(SourceGrid2.Range)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this GridRangeCollection
            </summary>
            <param name="value">
            The Range value to locate in the GridRangeCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.Insert(System.Int32,SourceGrid2.Range)">
            <summary>
            Inserts an element into the GridRangeCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Range is to be inserted.
            </param>
            <param name="value">
            The Range to insert.
            </param>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.Remove(SourceGrid2.Range)">
            <summary>
            Removes the first occurrence of a specific Range from this GridRangeCollection.
            </summary>
            <param name="value">
            The Range value to remove from this GridRangeCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.GridRangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this GridRangeCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:SourceGrid2.GridRangeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Range at the given index in this GridRangeCollection.
            </summary>
        </member>
        <member name="T:SourceGrid2.GridRangeCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by GridRangeCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:SourceGrid2.RowInfo">
            <summary>
            Row Information
            </summary>
        </member>
        <member name="M:SourceGrid2.RowInfo.#ctor(SourceGrid2.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.Focus">
            <summary>
            Move the Focus to the first cell that can receive the focus of the current row otherwise put the focus to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RowInfo.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size the current row with the max required height of all cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <param name="StartCol">Start column to measure</param>
            <param name="EndCol">End column to measure</param>
        </member>
        <member name="M:SourceGrid2.RowInfo.AutoSize(System.Boolean)">
            <summary>
            Auto size the current row with the max required height of all cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
        </member>
        <member name="M:SourceGrid2.RowInfo.Measure(System.Boolean)">
            <summary>
            Measures the current column when drawn with the specified cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <returns>Returns the minimum height</returns>
        </member>
        <member name="M:SourceGrid2.RowInfo.Measure(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Measures the current row when drawn with the specified cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <param name="StartCol">Start column to measure</param>
            <param name="EndCol">End column to measure</param>
            <returns>Returns the minimum height</returns>
        </member>
        <member name="P:SourceGrid2.RowInfo.Height">
            <summary>
            Height of the current row
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.Top">
            <summary>
            Top absolute position of the current row
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.Bottom">
            <summary>
            Bottom of the row (Top+Height)
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.Index">
            <summary>
            Index of the current row
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.Cells">
            <summary>
            Gets or sets the cells at the specified row
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.Select">
            <summary>
            Gets or sets if the current row is selected. If only a column of the row is selected this property returns true.
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.Tag">
            <summary>
            A property that the user can use to insert custom informations associated to a specific row
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.AutoSizeMode">
            <summary>
            Flags for autosize and stretch
            </summary>
        </member>
        <member name="T:SourceGrid2.RowInfo.RowInfoCollection">
            <summary>
            Collection of RowInfo
            </summary>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.#ctor(SourceGrid2.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_grid"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.RowAtPoint(System.Int32)">
            <summary>
            Calculate the Row that have the Top value smaller or equal than the point p_Y, or -1 if not found found. ExactMatch = false
            </summary>
            <param name="p_Y">Absolute point to search</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.RowAtPoint(System.Int32,System.Boolean)">
            <summary>
            Calculate the Row that have the Top value smaller or equal than the point p_Y, or -1 if not found found.
            </summary>
            <param name="p_Y">Y Coordinate to search for a row</param>
            <param name="p_ExactMatch">True to returns only exact position. For example if you use a point outside the range and this value is true no row is returned otherwise the nearest row is returned.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.IsValidRange(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.IsValidRangeForInsert(System.Int32,System.Int32)">
            <summary>
            Returns true if the range passed is valid for insert method
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.Insert(System.Int32,SourceGrid2.Cells.ICellVirtual[])">
            <summary>
            Insert a row at the specified position using the specified cells
            </summary>
            <param name="p_Index"></param>
            <param name="p_Cells">The new row values</param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.Insert(System.Int32)">
            <summary>
            Insert a row at the specified position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.Remove(System.Int32)">
            <summary>
            Remove a row at the speicifed position
            </summary>
            <param name="p_Index"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.InsertRange(System.Int32,System.Int32)">
            <summary>
            Insert the specified number of rows at the specified position
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove the RowInfo at the specified positions
            </summary>
            <param name="p_StartIndex"></param>
            <param name="p_Count"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move a row from one position to another position
            </summary>
            <param name="p_CurrentRowPosition"></param>
            <param name="p_NewRowPosition"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Change the position of row 1 with row 2.
            </summary>
            <param name="p_RowIndex1"></param>
            <param name="p_RowIndex2"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.OnRowsAdded(SourceGrid2.IndexRangeEventArgs)">
            <summary>
            Fired when the number of rows change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.OnRowsRemoved(SourceGrid2.IndexRangeEventArgs)">
            <summary>
            Fired when some rows are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.OnRowsRemoving(SourceGrid2.IndexRangeEventArgs)">
            <summary>
            Fired before some rows are removed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.CalculateTop(System.Int32)">
            <summary>
            Recalculate all the top positions from the specified index
            </summary>
            <param name="p_StartIndex"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.InvokeRowHeightChanged(SourceGrid2.RowInfoEventArgs)">
            <summary>
            Execute the RowHeightChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.AutoSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Auto size all the rows with the max required height of all cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
            <param name="StartCol">Start column to measure</param>
            <param name="EndCol">End column to measure</param>
        </member>
        <member name="M:SourceGrid2.RowInfo.RowInfoCollection.AutoSize(System.Boolean)">
            <summary>
            Auto size all the rows with the max required height of all cells.
            </summary>
            <param name="useColumnWidth">True to fix the column width when calculating the required height of the row.</param>
        </member>
        <member name="P:SourceGrid2.RowInfo.RowInfoCollection.Grid">
            <summary>
            Attached Grid
            </summary>
        </member>
        <member name="E:SourceGrid2.RowInfo.RowInfoCollection.RowsAdded">
            <summary>
            Fired when the number of rows change
            </summary>
        </member>
        <member name="E:SourceGrid2.RowInfo.RowInfoCollection.RowsRemoved">
            <summary>
            Fired when some rows are removed
            </summary>
        </member>
        <member name="E:SourceGrid2.RowInfo.RowInfoCollection.RowsRemoving">
            <summary>
            Fired before some rows are removed
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.RowInfoCollection.Item(System.Int32)">
            <summary>
            Indexer. Returns a RowInfo at the specified position
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.RowInfoCollection.Bottom">
            <summary>
            Returns the maximum bottom value of the rows. Calculated with Rows[lastRow].Bottom or 0 if no rows are presents.
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.RowInfoCollection.Top">
            <summary>
            Returns the minimum top value of the rows. Calculated with Rows[0].Top or 0 if no rows are presents.
            </summary>
        </member>
        <member name="E:SourceGrid2.RowInfo.RowInfoCollection.RowHeightChanged">
            <summary>
            Fired when the user change the Height property of one of the Row
            </summary>
        </member>
        <member name="P:SourceGrid2.RowInfo.RowInfoCollection.AutoCalculateTop">
            <summary>
            Indicates if auto recalculate top position when height value change. Default = true. Can be used when you need to change many times Height value for example for an AutoSize operation to increase performance.
            </summary>
        </member>
        <member name="T:SourceGrid2.Selection">
            <summary>
            Represent the selected cells of the grid.
            </summary>
        </member>
        <member name="M:SourceGrid2.Selection.#ctor(SourceGrid2.GridVirtual)">
            <summary>
            Constructor
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="M:SourceGrid2.Selection.GetCellsPositions">
            <summary>
            Returns the union of all the selected range as Position collection. This method doesn't return span cells; if for example grid[0,0] has a Span Column = 2 and the range selected is [0,0] -> [0,1] this method returns only 0,0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.GetCells">
            <summary>
            Returns the union of all the selected range as Position collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.IndexOf(SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Searches for the specified Cell and returns the zero-based index of the first occurrence that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="p_Cell"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.Contains(SourceGrid2.Position)">
            <summary>
            Indicates if the specified cell is selected
            </summary>
            <param name="p_Cell"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.Contains(SourceGrid2.Range)">
            <summary>
            Indicates if the specified range of cells is selected
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.ContainsRow(System.Int32)">
            <summary>
            Indicates if the specified row is selected
            </summary>
            <param name="p_Row"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.ContainsColumn(System.Int32)">
            <summary>
            Indicates if the specified column is selected
            </summary>
            <param name="p_Column"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.Clear(SourceGrid2.Position)">
            <summary>
            deseleziona tutte le celle tranne quella passata in input
            </summary>
            <param name="p_CellLeaveThisCellSelected"></param>
        </member>
        <member name="M:SourceGrid2.Selection.Clear">
            <summary>
            Deselect all the cells
            </summary>
        </member>
        <member name="M:SourceGrid2.Selection.Add(SourceGrid2.Position)">
            <summary>
            Select the specified cell and add the cell to the collection.
            </summary>
            <param name="p_Cell"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.AddRange(SourceGrid2.Range)">
            <summary>
            Select the specified Range of cells
            </summary>
            <param name="p_Range"></param>
        </member>
        <member name="M:SourceGrid2.Selection.RemoveRange(SourceGrid2.Range)">
            <summary>
            Deselect and remove from the collection the specified range of cells
            </summary>
            <param name="p_Range"></param>
        </member>
        <member name="M:SourceGrid2.Selection.Remove(SourceGrid2.Position)">
            <summary>
            Deselect and remove from the collection the specified cell
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid2.Selection.Invalidate">
            <summary>
            Invalidate all the selected cells
            </summary>
        </member>
        <member name="M:SourceGrid2.Selection.OnSelectionChange(SourceGrid2.SelectionChangeEventArgs)">
            <summary>
            Fired when a cell is added from the selection or removed from the selection
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Selection.GetRange">
            <summary>
            Returns the range of the current selection. If the user has selected non contiguous cells this method returns a range to contains all the selected cells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.GetContextMenus">
            <summary>
            Returns the ContextMenu used when the user Right-Click on a selected cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.OnClipboardCut">
            <summary>
            Cut the content of the selected cells. NOT YET IMPLEMENTED.
            </summary>
        </member>
        <member name="M:SourceGrid2.Selection.OnClipboardCopy">
            <summary>
            Copy the content of the selected cells
            </summary>
        </member>
        <member name="M:SourceGrid2.Selection.OnClipboardPaste">
            <summary>
            Paste the content of the selected cells
            </summary>
        </member>
        <member name="M:SourceGrid2.Selection.IsValidClipboardForPaste">
            <summary>
            Returns if the current content of the Clipboard is valid for Paste operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.DrawSelectionMask(SourceGrid2.GridSubPanel,System.Windows.Forms.PaintEventArgs,SourceGrid2.Range)">
            <summary>
            Draw the selection using the SelectionColor property over the selected cells. Draw a Border around the selection using Border and BorderMode properties.
            </summary>
            <param name="p_Panel"></param>
            <param name="e"></param>
            <param name="pRangeToRedraw">The range of cells that must be redrawed. Consider that can contains also not selected cells.</param>
        </member>
        <member name="M:SourceGrid2.Selection.Focus(SourceGrid2.Position)">
            <summary>
            Change the focus of the grid. 
            The calls order is: 
            
            (the user select CellX) 
            CellX.FocusEntering
            Grid.CellGotFocus(CellX), 
            CellX.FocusEntered, 
            [OnFocusRowEntered],
            [OnFocusColumnEntered]
            
            (the user select CellY), 
            CellY.FocusEntering 
            CellX.FocusLeaving
            Grid.CellLostFocus(CellX), 
            [OnFocusRowLeaving],
            [OnFocusColumnLeaving],
            CellX.FocusLeft,
            Grid.CellGotFocus(CellY), 
            CellY.FocusEntered,
            [OnFocusRowEntered],
            [OnFocusColumnEntered]
            
            Use Position.Empty to remove the focus cell.
            </summary>
            <param name="cellToSetFocus"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Selection.OnFocusRowLeaving(SourceGrid2.RowCancelEventArgs)">
            <summary>
            Fired before a row lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Selection.OnFocusRowEntered(SourceGrid2.RowEventArgs)">
            <summary>
            Fired after a row receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Selection.OnFocusColumnLeaving(SourceGrid2.ColumnCancelEventArgs)">
            <summary>
            Fired before a column lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Selection.OnFocusColumnEntered(SourceGrid2.ColumnEventArgs)">
            <summary>
            Fired after a column receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Selection.OnCellGotFocus(SourceGrid2.CellGotFocusEventArgs)">
            <summary>
            Fired when a cell receive the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Selection.OnCellLostFocus(SourceGrid2.CellLostFocusEventArgs)">
            <summary>
            Fired when a cell lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Selection.ClearValues">
            <summary>
            Clear all the selected cells with a valid Model.
            </summary>
        </member>
        <member name="M:SourceGrid2.Selection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:SourceGrid2.Selection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.Selection.Grid">
            <summary>
            Linked grid
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.Item(System.Int32)">
            <summary>
            Returns the cell at the specific position
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.SelectionChange">
            <summary>
            Fired when a cell is added from the selection or removed from the selection
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.SelectionMode">
            <summary>
            Selection type
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.EnableMultiSelection">
            <summary>
            True=Enable multi selection with the Ctrl key or Shift Key or with mouse.
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.SelectedRows">
            <summary>
            Returns an array of the rows selected
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.SelectedColumns">
            <summary>
            Returns an array of the columns selected
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.ContextMenuItems">
            <summary>
            ContextMenu of the selected cells. Null if no contextmenu is active.
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.AutoCopyPaste">
            <summary>
            True to enable the default copy/paste operations
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.ClipboardCopy">
            <summary>
            Copy event
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.ClipboardPaste">
            <summary>
            Paste Event
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.ClipboardCut">
            <summary>
            Cut event
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.FocusBackColor">
            <summary>
            BackColor of the cell with the Focus. Default is Color.Transparent.
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.BackColor">
            <summary>
            Selection backcolor. Usually is a color with a transparent value so you can see the color of the cell. Default is: Color.FromArgb(75, Color.FromKnownColor(KnownColor.Highlight))
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.Border">
            <summary>
            Border of the selection. Default is new RectangleBorder(new Border(Color.Black, 2));
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.BorderMode">
            <summary>
            Style of the selection border. Default is Auto.
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.FocusPosition">
            <summary>
            Returns the cell with the focus.
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.CellGotFocus">
            <summary>
            Fired before a cell receive the focus (FocusCell is populated after this event, use e.Cell to read the cell that will receive the focus)
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.CellLostFocus">
            <summary>
            Fired before a cell lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.FocusRowLeaving">
            <summary>
            Fired before a row lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.FocusRowEntered">
            <summary>
            Fired after a row receive the focus
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.FocusColumnLeaving">
            <summary>
            Fired before a column lost the focus
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.FocusColumnEntered">
            <summary>
            Fired after a column receive the focus
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.FocusRow">
            <summary>
            Returns the row that have the focus. If no row is selected return null.
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.FocusColumn">
            <summary>
            Returns the column that have the focus. If no column is selected return null.
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.FocusStyle">
            <summary>
            Specify the behavior of the focus and selection. Default is FocusStyle.None.
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.AutoClear">
            <summary>
            True to enable the default clear operation
            </summary>
        </member>
        <member name="E:SourceGrid2.Selection.ClearCells">
            <summary>
            Clear event
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:SourceGrid2.Selection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:SourceGrid2.Utility">
            <summary>
            Summary description for Utility.
            </summary>
        </member>
        <member name="F:SourceGrid2.Utility.DefaultCellHeight">
            <summary>
            Default Cell height
            </summary>
        </member>
        <member name="F:SourceGrid2.Utility.DefaultCellWidth">
            <summary>
            Default cell width
            </summary>
        </member>
        <member name="M:SourceGrid2.Utility.CalculateObjAlignment(SourceLibrary.Drawing.ContentAlignment,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="p_Align"></param>
            <param name="p_ClientLeft"></param>
            <param name="p_ClientTop"></param>
            <param name="p_ClientWidth"></param>
            <param name="p_ClientHeight"></param>
            <param name="p_ObjWidth"></param>
            <param name="p_ObjHeight"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Utility.CreateDataModel(System.Type)">
            <summary>
            Construct a DataModel for the specified type.
            If the Type support a UITypeEditor returns a EditorUITypeEditor else if the type has a StandardValues list return a EditorComboBox else if the type support string conversion returns a EditorTextBox otherwise returns null.
            </summary>
            <param name="p_Type">Cell Type</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Utility.CreateDataModel(System.Type,System.Object,System.Boolean,System.Collections.ICollection,System.Boolean,System.ComponentModel.TypeConverter,System.Drawing.Design.UITypeEditor)">
            <summary>
            Construct a CellEditor for the specified type
            </summary>
            <param name="p_Type">Cell Type</param>
            <param name="p_DefaultValue">Default value of the editor</param>
            <param name="p_bAllowNull">Allow null</param>
            <param name="p_StandardValues">List of available values or null if there is no available values list</param>
            <param name="p_bStandardValueExclusive">Indicates if the p_StandardValue are the unique values supported</param>
            <param name="p_TypeConverter">Type converter used for conversion for the specified type</param>
            <param name="p_UITypeEditor">UITypeEditor if null must be populated the TypeConverter</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Utility.ExportHTML_Element_Font(System.Xml.XmlTextWriter,System.String,System.Drawing.Font)">
            <summary>
            Export a font html element with the specified font and text
            </summary>
            <param name="p_Writer"></param>
            <param name="p_DisplayText"></param>
            <param name="p_Font"></param>
        </member>
        <member name="M:SourceGrid2.Utility.MeasureStringAndImage(System.Drawing.Graphics,System.String,System.Drawing.StringFormat,System.Drawing.Font,System.Drawing.Image,SourceLibrary.Drawing.ContentAlignment,System.Boolean,System.Boolean,SourceGrid2.RectangleBorder,System.Drawing.SizeF)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="p_Graphics"></param>
            <param name="p_bAlignTextToImage"></param>
            <param name="p_bImageStretch"></param>
            <param name="p_Border"></param>
            <param name="p_DisplayText"></param>
            <param name="p_Font"></param>
            <param name="p_Image"></param>
            <param name="p_ImageAlignment"></param>
            <param name="p_StringFormat"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.ValueCellComparer">
            <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the value of the cell.
            </summary>
        </member>
        <member name="T:SourceGrid2.DisplayStringCellComparer">
            <summary>
            A comparer for the Cell class. (Not for CellVirtual). Using the DisplayString of the cell.
            </summary>
        </member>
        <member name="M:SourceGrid2.IHTMLExport.ExportImage(System.Drawing.Image)">
            <summary>
            Save the Image to file and returns the file
            </summary>
            <param name="p_Image"></param>
            <returns>Returns the path where the image is exported valid for the HTML page</returns>
        </member>
        <member name="P:SourceGrid2.IHTMLExport.Mode">
            <summary>
            Export mode
            </summary>
        </member>
        <member name="T:SourceGrid2.HTMLExport">
            <summary>
            Setting for the export HTML of the grid
            </summary>
        </member>
        <member name="F:SourceGrid2.HTMLExport.m_EmbeddedImagesPath">
            <summary>
            Key:Image, Value:ImageFileName
            </summary>
        </member>
        <member name="M:SourceGrid2.HTMLExport.#ctor(SourceGrid2.ExportHTMLMode,System.String,System.String,System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="p_Mode"></param>
            <param name="p_ImageFullPath">The path to write embedded images files</param>
            <param name="p_ImageRelativePath">The path used in the HTML source. If you save the images in the same path of the HTML file you can leave this path empty.</param>
            <param name="p_HtmlStream">The stream to write</param>
        </member>
        <member name="M:SourceGrid2.HTMLExport.ClearEmbeddedImages">
            <summary>
            Clear the list of embedded images. This method don't delete the files only clear the list.
            </summary>
        </member>
        <member name="M:SourceGrid2.HTMLExport.ExportImage(System.Drawing.Image)">
            <summary>
            Save the Image to file and returns the file
            </summary>
            <param name="p_Image"></param>
            <returns>Returns the path where the image is exported valid for the HTML page</returns>
        </member>
        <member name="M:SourceGrid2.HTMLExport.ColorToHTML(System.Drawing.Color)">
            <summary>
            Convert a Color to HTML compatible string
            </summary>
            <param name="p_Color"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.HTMLExport.Mode">
            <summary>
            Export mode
            </summary>
        </member>
        <member name="P:SourceGrid2.HTMLExport.EmbeddedImagesPath">
            <summary>
            List of images exported during HTML export
            </summary>
        </member>
        <member name="T:SourceGrid2.PositionCollection">
            <summary>
            A collection of elements of type Position
            </summary>
        </member>
        <member name="M:SourceGrid2.PositionCollection.#ctor">
            <summary>
            Initializes a new empty instance of the PositionCollection class.
            </summary>
        </member>
        <member name="M:SourceGrid2.PositionCollection.#ctor(SourceGrid2.Position[])">
            <summary>
            Initializes a new instance of the PositionCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new PositionCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionCollection.#ctor(SourceGrid2.PositionCollection)">
            <summary>
            Initializes a new instance of the PositionCollection class, containing elements
            copied from another instance of PositionCollection
            </summary>
            <param name="items">
            The PositionCollection whose elements are to be added to the new PositionCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionCollection.AddRange(SourceGrid2.Position[])">
            <summary>
            Adds the elements of an array to the end of this PositionCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this PositionCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionCollection.AddRange(SourceGrid2.PositionCollection)">
            <summary>
            Adds the elements of another PositionCollection to the end of this PositionCollection.
            </summary>
            <param name="items">
            The PositionCollection whose elements are to be added to the end of this PositionCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionCollection.Add(SourceGrid2.Position)">
            <summary>
            Adds an instance of type Position to the end of this PositionCollection.
            </summary>
            <param name="value">
            The Position to be added to the end of this PositionCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionCollection.Contains(SourceGrid2.Position)">
            <summary>
            Determines whether a specfic Position value is in this PositionCollection.
            </summary>
            <param name="value">
            The Position value to locate in this PositionCollection.
            </param>
            <returns>
            true if value is found in this PositionCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.PositionCollection.IndexOf(SourceGrid2.Position)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this PositionCollection
            </summary>
            <param name="value">
            The Position value to locate in the PositionCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.PositionCollection.Insert(System.Int32,SourceGrid2.Position)">
            <summary>
            Inserts an element into the PositionCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Position is to be inserted.
            </param>
            <param name="value">
            The Position to insert.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionCollection.Remove(SourceGrid2.Position)">
            <summary>
            Removes the first occurrence of a specific Position from this PositionCollection.
            </summary>
            <param name="value">
            The Position value to remove from this PositionCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this PositionCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:SourceGrid2.PositionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Position at the given index in this PositionCollection.
            </summary>
        </member>
        <member name="T:SourceGrid2.PositionCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by PositionCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:SourceGrid2.LinkedControlsList">
            <summary>
            A dictionary with keys of type Control and values of type Position
            </summary>
        </member>
        <member name="M:SourceGrid2.LinkedControlsList.#ctor">
            <summary>
            Initializes a new empty instance of the ControlToPositionAssociation class
            </summary>
        </member>
        <member name="M:SourceGrid2.LinkedControlsList.Add(System.Windows.Forms.Control,SourceGrid2.Position)">
            <summary>
            Adds an element with the specified key and value to this ControlToPositionAssociation.
            </summary>
            <param name="key">
            The Control key of the element to add.
            </param>
            <param name="value">
            The Position value of the element to add.
            </param>
        </member>
        <member name="M:SourceGrid2.LinkedControlsList.Contains(System.Windows.Forms.Control)">
            <summary>
            Determines whether this ControlToPositionAssociation contains a specific key.
            </summary>
            <param name="key">
            The Control key to locate in this ControlToPositionAssociation.
            </param>
            <returns>
            true if this ControlToPositionAssociation contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SourceGrid2.LinkedControlsList.ContainsKey(System.Windows.Forms.Control)">
            <summary>
            Determines whether this ControlToPositionAssociation contains a specific key.
            </summary>
            <param name="key">
            The Control key to locate in this ControlToPositionAssociation.
            </param>
            <returns>
            true if this ControlToPositionAssociation contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SourceGrid2.LinkedControlsList.ContainsValue(SourceGrid2.Position)">
            <summary>
            Determines whether this ControlToPositionAssociation contains a specific value.
            </summary>
            <param name="value">
            The Position value to locate in this ControlToPositionAssociation.
            </param>
            <returns>
            true if this ControlToPositionAssociation contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SourceGrid2.LinkedControlsList.Remove(System.Windows.Forms.Control)">
            <summary>
            Removes the element with the specified key from this ControlToPositionAssociation.
            </summary>
            <param name="key">
            The Control key of the element to remove.
            </param>
        </member>
        <member name="P:SourceGrid2.LinkedControlsList.Item(System.Windows.Forms.Control)">
            <summary>
            Gets or sets the Position associated with the given Control
            </summary>
            <param name="key">
            The Control whose value to get or set.
            </param>
        </member>
        <member name="P:SourceGrid2.LinkedControlsList.Keys">
            <summary>
            Gets a collection containing the keys in this ControlToPositionAssociation.
            </summary>
        </member>
        <member name="P:SourceGrid2.LinkedControlsList.Values">
            <summary>
            Gets a collection containing the values in this ControlToPositionAssociation.
            </summary>
        </member>
        <member name="P:SourceGrid2.LinkedControlsList.UseCellBorder">
            <summary>
            True to insert the editor control inside the border of the cell, false to put the editor control over the entire cell. If you use true remember to set EnableCellDrawOnEdit == true.
            </summary>
        </member>
        <member name="T:SourceGrid2.PositionedImageCollection">
            <summary>
            A collection of elements of type PositionedImage
            </summary>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.#ctor">
            <summary>
            Initializes a new empty instance of the PositionedImageCollection class.
            </summary>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.#ctor(SourceGrid2.PositionedImage[])">
            <summary>
            Initializes a new instance of the PositionedImageCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new PositionedImageCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.#ctor(SourceGrid2.PositionedImageCollection)">
            <summary>
            Initializes a new instance of the PositionedImageCollection class, containing elements
            copied from another instance of PositionedImageCollection
            </summary>
            <param name="items">
            The PositionedImageCollection whose elements are to be added to the new PositionedImageCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.AddRange(SourceGrid2.PositionedImage[])">
            <summary>
            Adds the elements of an array to the end of this PositionedImageCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this PositionedImageCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.AddRange(SourceGrid2.PositionedImageCollection)">
            <summary>
            Adds the elements of another PositionedImageCollection to the end of this PositionedImageCollection.
            </summary>
            <param name="items">
            The PositionedImageCollection whose elements are to be added to the end of this PositionedImageCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.Add(SourceGrid2.PositionedImage)">
            <summary>
            Adds an instance of type PositionedImage to the end of this PositionedImageCollection.
            </summary>
            <param name="value">
            The PositionedImage to be added to the end of this PositionedImageCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.Contains(SourceGrid2.PositionedImage)">
            <summary>
            Determines whether a specfic PositionedImage value is in this PositionedImageCollection.
            </summary>
            <param name="value">
            The PositionedImage value to locate in this PositionedImageCollection.
            </param>
            <returns>
            true if value is found in this PositionedImageCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.IndexOf(SourceGrid2.PositionedImage)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this PositionedImageCollection
            </summary>
            <param name="value">
            The PositionedImage value to locate in the PositionedImageCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.Insert(System.Int32,SourceGrid2.PositionedImage)">
            <summary>
            Inserts an element into the PositionedImageCollection at the specified index
            </summary>
            <param name="index">
            The index at which the PositionedImage is to be inserted.
            </param>
            <param name="value">
            The PositionedImage to insert.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.Remove(SourceGrid2.PositionedImage)">
            <summary>
            Removes the first occurrence of a specific PositionedImage from this PositionedImageCollection.
            </summary>
            <param name="value">
            The PositionedImage value to remove from this PositionedImageCollection.
            </param>
        </member>
        <member name="M:SourceGrid2.PositionedImageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this PositionedImageCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:SourceGrid2.PositionedImageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the PositionedImage at the given index in this PositionedImageCollection.
            </summary>
        </member>
        <member name="T:SourceGrid2.PositionedImageCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by PositionedImageCollection.GetEnumerator.
            </summary>
        </member>
        <member name="T:SourceGrid2.ControlsRepository">
            <summary>
            A dictionary with keys of type Guid and values of type Control
            </summary>
        </member>
        <member name="M:SourceGrid2.ControlsRepository.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new empty instance of the ControlsRepository class
            </summary>
        </member>
        <member name="M:SourceGrid2.ControlsRepository.Add(System.Guid,System.Windows.Forms.Control)">
            <summary>
            Adds an element with the specified key and value to this ControlsRepository.
            </summary>
            <param name="key">
            The Guid key of the element to add.
            </param>
            <param name="value">
            The Control value of the element to add.
            </param>
        </member>
        <member name="M:SourceGrid2.ControlsRepository.Contains(System.Guid)">
            <summary>
            Determines whether this ControlsRepository contains a specific key.
            </summary>
            <param name="key">
            The Guid key to locate in this ControlsRepository.
            </param>
            <returns>
            true if this ControlsRepository contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SourceGrid2.ControlsRepository.ContainsKey(System.Guid)">
            <summary>
            Determines whether this ControlsRepository contains a specific key.
            </summary>
            <param name="key">
            The Guid key to locate in this ControlsRepository.
            </param>
            <returns>
            true if this ControlsRepository contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SourceGrid2.ControlsRepository.ContainsValue(System.Windows.Forms.Control)">
            <summary>
            Determines whether this ControlsRepository contains a specific value.
            </summary>
            <param name="value">
            The Control value to locate in this ControlsRepository.
            </param>
            <returns>
            true if this ControlsRepository contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:SourceGrid2.ControlsRepository.Remove(System.Guid)">
            <summary>
            Removes the element with the specified key from this ControlsRepository.
            </summary>
            <param name="key">
            The Guid key of the element to remove.
            </param>
        </member>
        <member name="P:SourceGrid2.ControlsRepository.Item(System.Guid)">
            <summary>
            Gets or sets the Control associated with the given Guid
            </summary>
            <param name="key">
            The Guid whose value to get or set.
            </param>
        </member>
        <member name="P:SourceGrid2.ControlsRepository.Keys">
            <summary>
            Gets a collection containing the keys in this ControlsRepository.
            </summary>
        </member>
        <member name="P:SourceGrid2.ControlsRepository.Values">
            <summary>
            Gets a collection containing the values in this ControlsRepository.
            </summary>
        </member>
        <member name="T:SourceGrid2.DataModels.DataModelBase">
            <summary>
            Represents the base class of a DataModel. This DataModel support conversion but doesn't provide any user interface editor.
            </summary>
        </member>
        <member name="T:SourceGrid2.DataModels.IDataModel">
            <summary>
            Class used for editing operation, string conversion and value formatting
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.IDataModel.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use Cell.StartEdit. For internal use only, use Cell.StartEdit.
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.IDataModel.InternalEndEdit(System.Boolean)">
            <summary>
            Terminate the edit action. For internal use only, use Cell.EndEdit.
            </summary>
            <param name="p_Cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
            <returns>Returns true if the cell terminate the editing mode</returns>
        </member>
        <member name="M:SourceGrid2.DataModels.IDataModel.ClearCell(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position)">
            <summary>
            Clear the value of the cell using the default value
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position">Cell position</param>
        </member>
        <member name="M:SourceGrid2.DataModels.IDataModel.SetCellValue(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Change the value of the cell applying the rule of the current editor. Is recommend to use this method to simulate a edit operation and to validate the cell value using the current model.
            </summary>
            <param name="p_Cell">Cell to change value</param>
            <param name="p_Position">Current Cell Position</param>
            <param name="p_NewValue"></param>
            <returns>returns true if the value passed is valid and has been applied to the cell</returns>
        </member>
        <member name="M:SourceGrid2.DataModels.IDataModel.IsErrorString(System.String)">
            <summary>
            Check if the given string is error
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.DataModels.IDataModel.EditCell">
            <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.IDataModel.EditPosition">
            <summary>
            Cell in editing, if Empty no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.IDataModel.IsEditing">
            <summary>
            Returns true if the cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.IDataModel.EnableEdit">
            <summary>
            Enable or disable the cell editor (if disable no edit is allowed). If false also not UI editing are blocked.
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.IDataModel.EditableMode">
            <summary>
            Mode to edit the cell.
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.IDataModel.EnableCellDrawOnEdit">
            <summary>
            Indicates if the draw of the cell when in editing mode is enabled.
            </summary>
        </member>
        <member name="E:SourceGrid2.DataModels.IDataModel.Validating">
            <summary>
            Fired to check if the value specified by the user is allowed
            this event is fired after the ValidatingValue (use ValidatingValue to check if the value is compatible with the cell)
            </summary>
        </member>
        <member name="E:SourceGrid2.DataModels.IDataModel.Validated">
            <summary>
            Fired after the value specified by the user inserited in the cell
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate StringEditor property
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.SetEditCell(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position)">
            <summary>
            Set the current editing cell, for an editor only one cell can be in editing state
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
        </member>
        <member name="F:SourceGrid2.DataModels.DataModelBase.m_ErrorString">
            <summary>
            Error rappresentation
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.IsErrorString(System.String)">
            <summary>
            Returns true if the string passed is equal to the error string rappresentation
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use Cell.StartEdit.
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.InternalApplyEdit">
            <summary>
            Apply edited value
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.InternalEndEdit(System.Boolean)">
            <summary>
            Cancel the edit action
            </summary>
            <param name="p_Cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
            <returns>Returns true if the cell terminate the editing mode</returns>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.GetEditedValue">
            <summary>
            Returns the new value edited with the custom control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.ClearCell(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position)">
            <summary>
            Clear the value of the cell using the default value
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position">Cell position</param>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.SetCellValue(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Change the value of the cell applying the rule of the current editor. Is recommend to use this method to simulate a edit operation and to validate the cell value using the current model.
            </summary>
            <param name="p_Cell">Cell to change value</param>
            <param name="p_Position">Current Cell Position</param>
            <param name="p_NewValue"></param>
            <returns>returns true if the value passed is valid and has been applied to the cell</returns>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.OnValidated(SourceGrid2.CellEventArgs)">
            <summary>
            Functions used when the validating operation is finished
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.OnValidating(SourceGrid2.ValidatingCellEventArgs)">
            <summary>
            Validating the value of the cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:SourceGrid2.DataModels.DataModelBase.EditException">
            <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.DataModelBase.OnEditException(SourceGrid2.EditExceptionEventArgs)">
            <summary>
            Event fired when an exception is throw in the Validated event or in an editing method
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid2.DataModels.DataModelBase.EditCell">
            <summary>
            Cell in editing, if null no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.DataModelBase.EditPosition">
            <summary>
            Cell in editing, if Empty no cell is in editing state
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.DataModelBase.ErrorString">
            <summary>
            String used when error occurred
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.DataModelBase.EnableEdit">
            <summary>
            Enable or disable the cell editor (if disable no visual edit is allowed)
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.DataModelBase.EditableMode">
            <summary>
            Mode to edit the cell.
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.DataModelBase.EnableCellDrawOnEdit">
            <summary>
            Indicates if the draw of the cell when in editing mode is enabled.
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.DataModelBase.IsEditing">
            <summary>
            Indicates if the current editor is in editing state
            </summary>
        </member>
        <member name="E:SourceGrid2.DataModels.DataModelBase.Validating">
            <summary>
            Validating event
            </summary>
        </member>
        <member name="E:SourceGrid2.DataModels.DataModelBase.Validated">
            <summary>
            Validated event
            </summary>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorComboBox">
            <summary>
            Editor for a ComboBox (using ComboBoxEx control)
            </summary>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorControlBase">
            <summary>
            The base class for all the editor that have a control
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.GetEditorControl(SourceGrid2.GridVirtual)">
            <summary>
            Returns the control attached to a particular grid, using ScrollablePanel. This method cannot be used to retrive editor attached to the fixed panel. Use GetEditorControl(GridSubPanel p_GridPanel) if you want to attach the editor to a fixed panel.
            </summary>
            <param name="p_Grid">The grid where the control is attached.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.GetEditorControl(SourceGrid2.GridSubPanel)">
            <summary>
            Returns the control attached to a particular grid panel.
            </summary>
            <param name="p_GridPanel"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.IsAttached(SourceGrid2.GridVirtual)">
            <summary>
            Returns true if the control is atteched to the grid. This method use IsAttached(GridSubPanel p_GridPanel) with ScrollablePanel property.
            </summary>
            <param name="p_Grid">The grid to check if the control is attached</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.IsAttached(SourceGrid2.GridSubPanel)">
            <summary>
            Returns true if the control is atteched to the grid panel.
            </summary>
            <param name="p_GridPanel">The grid to check if the control is attached</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.AttachEditorControl(SourceGrid2.GridVirtual)">
            <summary>
            Add the current editor to the grid ScrollablePanel. If you want to attach the editor to another panel call AttachEditorControl(GridSubPanel p_GridPanel)
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.AttachEditorControl(SourceGrid2.GridSubPanel)">
            <summary>
            Add the current editor to the grid panel.
            </summary>
            <param name="p_GridPanel"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.OnEditorAttached(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when the control is attached to a panel. Use this method to customize the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.DetachEditorControl(SourceGrid2.GridVirtual)">
            <summary>
            Remove the current editor from the grid control
            </summary>
            <param name="p_Grid"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.DetachEditorControl(SourceGrid2.GridSubPanel)">
            <summary>
            Remove the current editor from the grid panel.
            </summary>
            <param name="p_GridPanel"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use Cell.StartEdit.
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.GetEditorControlGuid">
            <summary>
            Returns the GUID of the control that the current editor use
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.CreateEditorControl">
            <summary>
            Create a new control used in this editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.InternalApplyEdit">
            <summary>
            Apply edited value
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.InternalEndEdit(System.Boolean)">
            <summary>
            Terminate the edit action
            </summary>
            <param name="p_Cancel">True to cancel the editing and return to normal mode, false to call automatically ApplyEdit and terminate editing</param>
            <returns>Returns true if the cell terminate the editing mode</returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.InnerControl_Validated(System.Object,System.EventArgs)">
            <summary>
            Validated of the editor control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorControlBase.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorComboBox.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorComboBox.#ctor(System.Type,System.Collections.ICollection,System.Boolean)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
            <param name="p_StandardValues"></param>
            <param name="p_StandardValueExclusive">True to not allow custom value, only the values specified in the standardvalues collection are allowed.</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorComboBox.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use Cell.StartEdit.
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorComboBox.OnEditorAttached(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when the control is attached to a panel. Use this method to customize the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorComboBox.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorDateTime">
            <summary>
            Create a DataModel editor that use a DateTimePicker as editor.
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorDateTime.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorDateTime.CreateEditorControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorDateTime.GetEditorDateTimePicker(SourceGrid2.GridVirtual)">
            <summary>
            Returns the DateTimePicker
            </summary>
            <param name="p_Grid"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorDateTime.GetEditorDateTimePicker(SourceGrid2.GridSubPanel)">
            <summary>
            Returns the DateTimePicker
            </summary>
            <param name="p_GridPanel"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorDateTime.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorDateTime.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorNumericUpDown">
            <summary>
            Summary description for NumericUpDownEditor.
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorNumericUpDown.#ctor">
            <summary>
            Create a model of type Decimal
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorNumericUpDown.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorNumericUpDown.OnEditorAttached(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when the control is attached to a panel. Use this method to customize the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorNumericUpDown.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorTextBox">
            <summary>
            A DataModel that use a TextBoxTyped for editing support.
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBox.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBox.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use Cell.StartEdit.
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBox.OnEditorAttached(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when the control is attached to a panel. Use this method to customize the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBox.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.DataModels.EditorTextBox.Multiline">
            <summary>
            Gets or sets a value indicating whether this is a multiline text box editor.
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.EditorTextBox.MaxLength">
            <summary>
            Gets or sets the maximum number of characters allowed in the text box editor.
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.EditorTextBox.ValidCharacters">
            <summary>
            A list of characters allowed for the textbox. Used in the OnKeyPress event. If null no check is made.
            If not null any others charecters is not allowed. First the function check if ValidCharacters is not null then check for InvalidCharacters.
            </summary>
        </member>
        <member name="P:SourceGrid2.DataModels.EditorTextBox.InvalidCharacters">
            <summary>
            A list of characters not allowed for the textbox. Used in the OnKeyPress event. If null no check is made.
            If not null any characters in the list is not allowed. First the function check if ValidCharacters is not null then check for InvalidCharacters.
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBoxButton.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBoxButton.InternalStartEdit(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Object)">
            <summary>
            Start editing the cell passed. Do not call this method for start editing a cell, you must use Cell.StartEdit.
            </summary>
            <param name="p_Cell">Cell to start edit</param>
            <param name="p_Position">Editing position(Row/Col)</param>
            <param name="p_StartEditValue">Can be null(in this case use the p_cell.Value</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBoxButton.OnEditorAttached(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when the control is attached to a panel. Use this method to customize the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBoxButton.GetEditedValue">
            <summary>
            Returns the value inserted with the current editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorTextBoxNumeric">
            <summary>
            A DataModel that use a TextBoxTypedNumeric for editing support. You can customize the NumericCharStyle property to enable char validation.
            This class automatically set the ValidCharacters and InvalidCharacters using SourceLibrary.Windows.Forms.TextBoxTypedNumeric.CreateNumericValidChars method.
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBoxNumeric.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTextBoxNumeric.OnEditorAttached(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when the control is attached to a panel. Use this method to customize the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:SourceGrid2.DataModels.EditorTextBoxNumeric.NumericCharStyle">
            <summary>
            This property automatically set the ValidCharacters and InvalidCharacters using SourceLibrary.Windows.Forms.TextBoxTypedNumeric.CreateNumericValidChars method.
            </summary>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorTime">
            <summary>
            Create a DataModel editor that use a DateTimePicker as editor and a DateTimeTypeConverter for TypeConverter using a time format.
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTime.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTime.#ctor(System.String,System.String[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorTime.CreateEditorControl">
            <summary>
            Create the editor control
            </summary>
            <returns></returns>
        </member>
        <member name="T:SourceGrid2.DataModels.EditorUITypeEditor">
            <summary>
             A model that use a UITypeEditor to edit the cell.
            </summary>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorUITypeEditor.#ctor(System.Type)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorUITypeEditor.#ctor(System.Type,System.Drawing.Design.UITypeEditor)">
            <summary>
            Construct a Model. Based on the Type specified the constructor populate AllowNull, DefaultValue, TypeConverter, StandardValues, StandardValueExclusive
            </summary>
            <param name="p_Type">The type of this model</param>
            <param name="p_UITypeEditor"></param>
        </member>
        <member name="M:SourceGrid2.DataModels.EditorUITypeEditor.OnEditorAttached(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when the control is attached to a panel. Use this method to customize the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:SourceGrid2.Grid">
            <summary>
            The mai grid control with static data.
            </summary>
        </member>
        <member name="T:SourceGrid2.GridVirtual">
            <summary>
            A abstract Grid control to support large virtual data. You must override GetCell and SetCell methods.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.#ctor">
            <summary>
            Grid constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.GetGridContextMenus">
            <summary>
            Create the standard contextmenu based on the current selection, current focuscell and current grid settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.AutoSize(SourceGrid2.Range)">
            <summary>
            Auto size the columns and the rows speified
            </summary>
            <param name="p_RangeToAutoSize"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.AutoSize">
            <summary>
            Auto size all the columns and all the rows with the required width and height
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.AutoSizeView(System.Boolean)">
            <summary>
            Auto size the columns and the rows currently visible
            </summary>
            <param name="p_UseAllColumns">If true this method AutoSize all the columns using the data in the current rows visible, otherwise autosize only visible columns</param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.StretchColumnsToFitWidth">
            <summary>
            stretch the columns width to always fit the available space, also when the contents of the cell is smaller.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.StretchRowsToFitHeight">
            <summary>
            stretch the rows height to always fit the available space, also when the contents of the cell is smaller.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnResize(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.Resize event.  
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ShowColumnWidthSettings(System.Int32)">
            <summary>
            Display the form for customize column's width
            </summary>
            <param name="p_col"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ShowRowHeightSettings(System.Int32)">
            <summary>
            Dsplay the form for customize row's height
            </summary>
            <param name="p_row"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.Redim(System.Int32,System.Int32)">
            <summary>
            Set the number of columns and rows
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PositionToDisplayRect(SourceGrid2.Position)">
            <summary>
            Get the rectangle of the cell respect to the client area visible, the grid DisplayRectangle.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PositionToAbsoluteRect(SourceGrid2.Position)">
            <summary>
            Get the Rectangle of the cell respect all the scrollable area. This method cannot use Row/Col Span.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.RangeToAbsoluteRect(SourceGrid2.Range)">
            <summary>
            Returns the absolute rectangle relative to the total scrollable area of the specified Range. Returns a 0 rectangle if the Range is not valid
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.RangeToDisplayRect(SourceGrid2.Range)">
            <summary>
            Returns the relative rectangle to the current scrollable area of the specified Range. Returns a 0 rectangle if the Range is not valid. Calculates the relative position based on the Range.End property.
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.IsCellVisible(SourceGrid2.Position)">
            <summary>
            Indicates if the specified cell is visible.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.GetScrollPositionToShowCell(SourceGrid2.Position,System.Drawing.Point@)">
            <summary>
            Return the scroll position that must be set to show a specific cell.
            </summary>
            <param name="p_Position"></param>
            <param name="p_NewScrollPosition"></param>
            <returns>Return false if the cell is already visible, return true is the cell is not currently visible.</returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ShowCell(SourceGrid2.Position)">
            <summary>
            Scroll the view to show the cell passed
            </summary>
            <param name="p_Position"></param>
            <returns>Returns true if the Cell passed was already visible, otherwise false</returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.InvalidateCell(SourceGrid2.Position)">
            <summary>
            Force a cell to redraw. If Redraw is set to false this function has no effects
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.InvalidateRange(SourceGrid2.Range)">
            <summary>
            Force a range of cells to redraw. If Redraw is set to false this function has no effects
            </summary>
            <param name="p_Range"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnLeave(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.Leave event.  
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PositionToStartPosition(SourceGrid2.Position)">
            <summary>
            This method convert a Position to the real start position of cell. This is usefull when RowSpan or ColumnSPan is grater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0 and if you call this method with 0,1 return again 0,0.
            Get the real position for the specified position. For example when p_Position is a merged cell this method returns the starting position of the merged cells.
            Usually this method returns the same cell specified as parameter. This method is used for processing arrow keys, to find a valid cell when the focus is in a merged cell.
            For this class returns always p_Position.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="F:SourceGrid2.GridVirtual.m_MouseCellPosition">
            <summary>
            indica l'ultima cella su cui il mouse è stato spostato 
            serve per la gestione dell'evento Cell.MouseLeave e MouseEnter
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ChangeMouseCell(SourceGrid2.Position)">
            <summary>
            Fired when the cell under the mouse change. For internal use only.
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ChangeMouseDownCell(SourceGrid2.Position,SourceGrid2.Position)">
            <summary>
            Change the cell currently under the mouse
            </summary>
            <param name="p_MouseDownCell"></param>
            <param name="p_MouseCell"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnMouseSelectionFinish(SourceGrid2.RangeEventArgs)">
            <summary>
            Fired when the selection eith the mouse is finished
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnUndoMouseSelection(SourceGrid2.RangeEventArgs)">
            <summary>
            Fired when the mouse selection must be canceled
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnApplyMouseSelection(SourceGrid2.RangeEventArgs)">
            <summary>
            Fired when the mouse selection is succesfully finished
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnMouseSelectionChange(System.EventArgs)">
            <summary>
            Fired when the mouse selection change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.MouseSelectionFinish">
            <summary>
            Fired when the mouse selection finish
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ChangeMouseSelectionCorner(SourceGrid2.Position)">
            <summary>
            Fired when the corner of the mouse selection change. For internal use only.
            </summary>
            <param name="p_Corner"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.CreateSelectionObject">
            <summary>
            Create the Selection object. Override this method to create a custom selection object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SourceGrid2.GridVirtual.m_MouseDownPosition">
            <summary>
            Represents the cell that receive the mouse down event
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ProcessSpecialGridKey(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Process Delete, Ctrl+C, Ctrl+V, Up, Down, Left, Right, Tab keys 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnTopLeftPanelPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fired when draw Left Panel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnLeftPanelPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fired when draw Left Panel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnTopPanelPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fired when draw Top Panel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnScrollablePanelPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fired when draw scrollable panel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PanelPaint(SourceGrid2.GridSubPanel,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the specified region of cells in PaintEventArgs to the GridSubPanel specified
            </summary>
            <param name="p_Panel"></param>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PaintRange(SourceGrid2.GridSubPanel,System.Windows.Forms.PaintEventArgs,SourceGrid2.Range)">
            <summary>
            Draw a range of cells in the specified panel
            </summary>
            <param name="p_Panel"></param>
            <param name="e"></param>
            <param name="p_Range"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PaintCell(SourceGrid2.GridSubPanel,System.Windows.Forms.PaintEventArgs,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Drawing.Rectangle)">
            <summary>
            Draw the specified Cell
            </summary>
            <param name="p_Panel"></param>
            <param name="e"></param>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="p_PanelDrawRectangle"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseWheel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnPanelMouseLeave(System.EventArgs)">
            <summary>
            MouseLeave event attached to a Panel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnPanelMouseEnter(System.EventArgs)">
            <summary>
            MouseEnter event attached to a Panel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridMouseHover(System.EventArgs)">
            <summary>
            Mouse Hover
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnPanelDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            DragDrop event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnPanelDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            DragEnter event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnPanelDragLeave(System.EventArgs)">
            <summary>
            DragDrop event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnPanelDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            DragOver event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridClick(System.EventArgs)">
            <summary>
            Click event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridDoubleClick(System.EventArgs)">
            <summary>
            Double-Click event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            KeyDown event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            KeyUp event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnGridKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            KeyPress event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ExportHTML(SourceGrid2.IHTMLExport)">
            <summary>
            Export the grid contents in html format
            </summary>
            <param name="p_Export"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ExportHTMLCell(SourceGrid2.Position,SourceGrid2.Cells.ICellVirtual,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter)">
            <summary>
            Export the specified cell to HTML
            </summary>
            <param name="p_CurrentPosition"></param>
            <param name="p_Cell"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnHScrollPositionChanged(SourceGrid2.ScrollPositionChangedEventArgs)">
            <summary>
            OnHScrollPositionChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnVScrollPositionChanged(SourceGrid2.ScrollPositionChangedEventArgs)">
            <summary>
            OnVScrollPositionChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.RefreshLinkedControlsBounds">
            <summary>
            Refresh the linked controls bounds
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fired when you remove a linked control from the grid.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SuspendLayoutGrid">
            <summary>
            Temporarily suspends the layout logic for the control and all the children panels controls.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ResumeLayoutGrid">
            <summary>
            Resumes normal layout logic to current control and children controls and forces an immediate layout of pending layout requests.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.RefreshGridLayout">
            <summary>
            Recalculate the scrollbar position and value based on the current cells, scroll client area, linked controls and more. If redraw == false this method has not effect. This method is called when you put Redraw = true;
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.InvalidateCells">
            <summary>
            Invalidate all the cells.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            OnLayout Method
            </summary>
            <param name="levent"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SortRangeRows(SourceGrid2.IRangeLoader,System.Int32,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort a range of the grid
            </summary>
            <param name="p_RangeToSort">Range to sort</param>
            <param name="p_AbsoluteColKeys">Index of the column relative to the grid to use as sort keys, must be between start and end col of the range</param>
            <param name="p_bAsc">Ascending true, Descending false</param>
            <param name="p_CellComparer">CellComparer, if null the default comparer will be used</param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SortRangeRows(SourceGrid2.Range,System.Int32,System.Boolean,System.Collections.IComparer)">
            <summary>
            Sort a range of the grid.
            </summary>
            <param name="p_Range"></param>
            <param name="p_AbsoluteColKeys">Index of the column relative to the grid to use as sort keys, must be between start and end col</param>
            <param name="p_bAscending">Ascending true, Descending false</param>
            <param name="p_CellComparer">CellComparer, if null the default ValueCellComparer comparer will be used</param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnSortingRangeRows(SourceGrid2.SortRangeRowsEventArgs)">
            <summary>
            Fired when calling SortRangeRows method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnSortedRangeRows(SourceGrid2.SortRangeRowsEventArgs)">
            <summary>
            Fired after calling SortRangeRows method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes a command key. 
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.GetCell(System.Int32,System.Int32)">
            <summary>
            Return the Cell at the specified Row and Col position. Simply call GettingCell event.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SetCell(System.Int32,System.Int32,SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Set the specified cell int he specified position. Simply call SettingCell event.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.GetCellsAtRow(System.Int32)">
            <summary>
            Returns all the cells at specified row position
            </summary>
            <param name="p_RowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SetCellsAtRow(System.Int32,SourceGrid2.Cells.ICellVirtual[])">
            <summary>
            Set the specified cells at the specified row position
            </summary>
            <param name="p_RowIndex"></param>
            <param name="p_Cells"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.GetCellsAtColumn(System.Int32)">
            <summary>
            Returns all the cells at specified column position
            </summary>
            <param name="p_ColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SetCellsAtColumn(System.Int32,SourceGrid2.Cells.ICellVirtual[])">
            <summary>
            Set the specified cells at the specified row position
            </summary>
            <param name="p_ColumnIndex"></param>
            <param name="p_Cells"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.CalculatePanelsLocation">
            <summary>
            Recalculate panel position
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PanelAtPosition(SourceGrid2.Position)">
            <summary>
            Get the panels that contains the specified cells position. Returns null if the position is not valid
            </summary>
            <param name="p_CellPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SetFocusOnCells">
            <summary>
            Set the focus on the control that contains the cells. Consider that the grid control contains a series of panels, so to set the focus on a cell you must first set the focus on the panels. This method set the Focus on the right panel.
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.InvalidateScrollableArea">
            <summary>
            Invalidate the scrollable area
            </summary>
        </member>
        <member name="M:SourceGrid2.GridVirtual.GetPositionType(SourceGrid2.Position)">
            <summary>
            Returns the type of a cell position
            </summary>
            <param name="p_CellPosition"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PositionAtPoint(System.Drawing.Point)">
            <summary>
            Returns the cell at the specified grid view relative point (the point must be relative to the grid display region), SearchInFixedCells = true. Return Empty if no valid cells are found
            </summary>
            <param name="p_RelativeViewPoint">Point</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.PositionAtPoint(System.Drawing.Point,System.Boolean)">
            <summary>
            Returns the cell at the specified grid view relative point (the point must be relative to the grid display region)
            </summary>
            <param name="p_RelativeViewPoint">Point</param>
            <param name="p_bSearchInFixedCells">True if you want to consider fixed cells in the search</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.RangeAtAbsRect(System.Drawing.Rectangle)">
            <summary>
            Returns a range of cells inside an absolute rectangle
            </summary>
            <param name="p_AbsoluteRect"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fired when a user scroll with the mouse wheel
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.GridVirtual.GetCell(SourceGrid2.Position)">
            <summary>
            Return the Cell at the specified Row and Col position. This method is called for sort operations and for Move operations. If position is Empty return null. This method calls GetCell(int p_iRow, int p_iCol)
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.GridVirtual.SetCell(SourceGrid2.Position,SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Set the specified cell int he specified position. This method calls SetCell(int p_iRow, int p_iCol, ICellVirtual p_Cell)
            </summary>
            <param name="p_Position"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="P:SourceGrid2.GridVirtual.ContextMenuStyle">
            <summary>
            Context Menu flags enum ( default = ContextMenuStyle.AllowAutoSize | ContextMenuStyle.AllowColumnResize | ContextMenuStyle.AllowRowResize ).
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.ContextMenu">
            <summary>
            Gets or sets the shortcut menu associated with the control.
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.AutoSizeMinHeight">
            <summary>
            Indicates the minimun height when autosize row
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.AutoSizeMinWidth">
            <summary>
            Indicates the minimun when autosize col
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.AutoStretchColumnsToFitWidth">
            <summary>
            True to auto stretch the columns width to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original width of the columns
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.AutoStretchRowsToFitHeight">
            <summary>
            True to auto stretch the rows height to always fit the available space, also when the contents of the cell is smaller.
            False to leave the original height of the rows
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.MouseCellPosition">
            <summary>
            The cell position currently under the mouse cursor (row, col). If you MouseDown on a cell this cell is the MouseCellPosition until an MouseUp is fired
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.MouseSelectionRange">
            <summary>
            Returns the cells that are selected with the mouse. Range.Empty if no cells are selected
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.Selection">
            <summary>
            return the selected cells
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.MouseDownPosition">
            <summary>
            Represents the cell that have received the MouseDown event. You can use this cell for contextmenu logic. Can be null.
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.SpecialKeys">
            <summary>
            Special keys that the grid can handle. You can change this enum to block or allow some special keys function. For example to disable Ctrl+C Copy operation remove from this enum the GridSpecialKeys.Ctrl_C.
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.GridScrollPosition">
            <summary>
            Position of the scrollbars
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.MouseDown">
            <summary>
            MouseDown event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.MouseUp">
            <summary>
            MouseUp event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.MouseMove">
            <summary>
            MouseMove event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.MouseWheel">
            <summary>
            MouseWheel event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.MouseLeave">
            <summary>
            MouseLeave event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.MouseEnter">
            <summary>
            MouseEnter event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.MouseHover">
            <summary>
            Mouse Hover
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.DragDrop">
            <summary>
            DragDrop event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.DragEnter">
            <summary>
            DragEnter event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.DragLeave">
            <summary>
            DragLeave event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.DragOver">
            <summary>
            DragOver event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.Click">
            <summary>
            Click event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.DoubleClick">
            <summary>
            DoubleClick event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.KeyDown">
            <summary>
            KeyDown event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.KeyUp">
            <summary>
            KeyUp event
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.KeyPress">
            <summary>
            KeyPress event
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.LinkedControls">
            <summary>
            List of controls that are linked to a specific cell position. For example is used for editors controls. Key=Control, Value=Position. The controls are automatically removed from the list when they are removed from the Grid.Controls collection
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.Redraw">
            <summary>
            If false the cells are not redrawed. Set False to increase performance when adding many cells, after adding the cells remember to set this property to true. 
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.SortingRangeRows">
            <summary>
            Fired when calling SortRangeRows method
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.SortedRangeRows">
            <summary>
            Fired after calling SortRangeRows method
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.GettingCell">
            <summary>
            Fired when GetCell is called with GridVirtual class. Use the e.Cell property to set the cell class
            </summary>
        </member>
        <member name="E:SourceGrid2.GridVirtual.SettingCell">
            <summary>
            Fired when SetCell is called with GridVirtual class. Read the e.Cell property to get the cell class
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.LeftPanel">
            <summary>
            Not scrollable left panel (For RowHeader)
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.TopPanel">
            <summary>
            Not scrollable top panel (For ColHeader)
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.TopLeftPanel">
            <summary>
            Not scrollable top+left panel (For Row or Col Header)
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.ScrollablePanel">
            <summary>
            Scrollable panel for normal scrollable cells
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.HiddenFocusPanel">
            <summary>
            Hidden panl for innternal use only. I use this panel to catch mouse and keyboard events.
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.CellsContainsFocus">
            <summary>
            Returns true if the cells have the focus. See also SetFocusOnCells
            </summary>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.GridVirtual.ColumnsCount">
            <summary>
            Indicates the number of columns
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.RowsCount">
            <summary>
            Indicates the number of rows
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.FixedRows">
            <summary>
            Indicates how many rows are not scrollable
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.FixedColumns">
            <summary>
            Indicates how many cols are not scrollable
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.Rows">
            <summary>
            RowsCount informations
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.Columns">
            <summary>
            Columns informations
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.CompleteRange">
            <summary>
            Returns a Range that represents the complete cells of the grid
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.GridToolTipActive">
            <summary>
            True to activate the tooltiptext
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.GridCursor">
            <summary>
            Cursor for the container of the cells. This property is used when you set a cursor to a specified cell.
            </summary>
        </member>
        <member name="P:SourceGrid2.GridVirtual.GridToolTipText">
            <summary>
            ToolTip text of the container of the cells. This property is used when you set a tooltip to a specified cell.
            </summary>
        </member>
        <member name="M:SourceGrid2.Grid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SourceGrid2.Grid.GetCell(System.Int32,System.Int32)">
            <summary>
            Return the Cell at the specified Row and Col position.
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.SetCell(System.Int32,System.Int32,SourceGrid2.Cells.ICellVirtual)">
            <summary>
            Set the specified cell int he specified position. Abstract method of the GridVirtual control
            </summary>
            <param name="p_iRow"></param>
            <param name="p_iCol"></param>
            <param name="p_Cell"></param>
        </member>
        <member name="F:SourceGrid2.Grid.m_Cells">
            <summary>
            Array of cells
            </summary>
        </member>
        <member name="M:SourceGrid2.Grid.RemoveCell(System.Int32,System.Int32)">
            <summary>
            Remove the specified cell
            </summary>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:SourceGrid2.Grid.InsertCell(System.Int32,System.Int32,SourceGrid2.Cells.ICell)">
            <summary>
            Insert the specified cell (for best performance set Redraw property to false)
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="p_cell"></param>
        </member>
        <member name="M:SourceGrid2.Grid.GetCellsAtColumn(System.Int32)">
            <summary>
            Returns all the cells at specified column position
            </summary>
            <param name="p_ColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.GetCellsAtRow(System.Int32)">
            <summary>
            Returns all the cells at specified row position
            </summary>
            <param name="p_RowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.RedimCellsMatrix(System.Int32,System.Int32)">
            <summary>
            Ridimensiona la matrice di celle e copia le eventuali vecchie celle presenti nella nuova matrice
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
        </member>
        <member name="M:SourceGrid2.Grid.SetMaxSpanSearch(System.Int32,System.Boolean)">
            <summary>
            Loads the MaxSpanSearch property.
            </summary>
            <param name="p_MaxSpanSearch"></param>
            <param name="p_Reset"></param>
        </member>
        <member name="M:SourceGrid2.Grid.PositionToStartPosition(SourceGrid2.Position)">
            <summary>
            This method convert a Position to the real start position of cell. This is usefull when RowSpan or ColumnSPan is grater than 1.
            For example suppose to have at grid[0,0] a cell with ColumnSpan equal to 2. If you call this method with the position 0,0 returns 0,0 and if you call this method with 0,1 return again 0,0.
            Get the real position for the specified position. For example when p_Position is a merged cell this method returns the starting position of the merged cells.
            Usually this method returns the same cell specified as parameter. This method is used for processing arrow keys, to find a valid cell when the focus is in a merged cell.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.PositionToAbsoluteRect(SourceGrid2.Position)">
            <summary>
            Get the Rectangle of the cell respect all the scrollable area. Using the Cell Row/Col Span.
            </summary>
            <param name="p_Position"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.RangeToAbsoluteRect(SourceGrid2.Range)">
            <summary>
            Returns the absolute rectangle relative to the total scrollable area of the specified Range. Returns a 0 rectangle if the Range is not valid
            </summary>
            <param name="p_Range"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.IsCellVisible(SourceGrid2.Cells.ICell)">
            <summary>
            Returns true if the specified cell is visible otherwise false
            </summary>
            <param name="p_Cell"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.ShowCell(SourceGrid2.Cells.ICell)">
            <summary>
            Scroll the view to show the specified cell
            </summary>
            <param name="p_CellToShow"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.InvalidateCell(SourceGrid2.Cells.ICell)">
            <summary>
            Force a redraw of the specified cell
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid2.Grid.InvalidateCell(SourceGrid2.Position)">
            <summary>
            Force a cell to redraw. If Redraw is set to false this function has no effects. If ColSpan or RowSpan is greater than 0 this function invalidate the complete range with InvalidateRange
            </summary>
            <param name="p_Position"></param>
        </member>
        <member name="M:SourceGrid2.Grid.PaintCell(SourceGrid2.GridSubPanel,System.Windows.Forms.PaintEventArgs,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Drawing.Rectangle)">
            <summary>
            Draw the specified Cell
            </summary>
            <param name="p_Panel"></param>
            <param name="e"></param>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="p_PanelDrawRectangle"></param>
        </member>
        <member name="M:SourceGrid2.Grid.SetFocusCell(SourceGrid2.Cells.ICell)">
            <summary>
            Set the focus to the specified cell (the specified cell became the active cell, FocusCell property).
            </summary>
            <param name="p_CellToSetFocus"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.Grid.ChangeMouseDownCell(SourceGrid2.Position,SourceGrid2.Position)">
            <summary>
            Change the cell currently under the mouse
            </summary>
            <param name="p_MouseDownCell"></param>
            <param name="p_MouseCell"></param>
        </member>
        <member name="M:SourceGrid2.Grid.ChangeMouseCell(SourceGrid2.Position)">
            <summary>
            Fired when the cell under the mouse change. For internal use only.
            </summary>
            <param name="p_Cell"></param>
        </member>
        <member name="M:SourceGrid2.Grid.OnSortingRangeRows(SourceGrid2.SortRangeRowsEventArgs)">
            <summary>
            Fired when calling SortRangeRows method. If the range contains all the columns this method move directly the row object otherwise move each cell.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SourceGrid2.Grid.ExportHTMLCell(SourceGrid2.Position,SourceGrid2.Cells.ICellVirtual,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter)">
            <summary>
            Export the specified cell to HTML
            </summary>
            <param name="p_CurrentPosition"></param>
            <param name="p_Cell"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
        </member>
        <member name="P:SourceGrid2.Grid.Item(System.Int32,System.Int32)">
            <summary>
            Returns or set a cell at the specified row and col. If you get a ICell position occupied by a row/col span cell, and EnableRowColSpan is true, this method returns the cell with Row/Col span.
            </summary>
        </member>
        <member name="P:SourceGrid2.Grid.EnableRowColSpan">
            <summary>
            Get if Row/Col Span is enabled. This value is automatically calculated based on the current cells.
            </summary>
        </member>
        <member name="P:SourceGrid2.Grid.MaxSpanSearch">
            <summary>
            Gets the maximum rows or columns number to search when using Row/Col Span. This value is automatically calculated based on the current cells. Do not change this value manually.
            </summary>
        </member>
        <member name="P:SourceGrid2.Grid.FocusCell">
            <summary>
            Returns the active cell. Null if no cell are active
            </summary>
        </member>
        <member name="P:SourceGrid2.Grid.MouseCell">
            <summary>
            The cell currently under the mouse cursor. Null if no cell are under the mouse cursor.
            </summary>
        </member>
        <member name="P:SourceGrid2.Grid.CustomSort">
            <summary>
            Gets or sets if when calling SortRangeRows method use a custom sort or an automatic sort. Default = false (automatic)
            </summary>
        </member>
        <member name="T:SourceGrid2.VisualModels.CheckBox">
            <summary>
            Summary description for VisualModelCheckBox.
            </summary>
        </member>
        <member name="T:SourceGrid2.VisualModels.Common">
            <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="T:SourceGrid2.VisualModels.VisualModelBase">
            <summary>
            Class to manage the visual aspect of a cell. This class can be shared beetween multiple cells.
            </summary>
        </member>
        <member name="T:SourceGrid2.VisualModels.IVisualModel">
            <summary>
            A interface that represents the visual aspect of a cell. Contains the Draw method and the common properties
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.IVisualModel.DrawCell(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the cell specified
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.IVisualModel.Measure(System.Drawing.Graphics,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Drawing.SizeF)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="p_Graphics"></param>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.IVisualModel.ExportHTML(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter)">
            <summary>
            Export the cell contents in html format
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.IVisualModel.Clone(System.Boolean)">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_bReadOnly">True if the new object must be read only, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.IVisualModel.MakeReadOnly">
            <summary>
            Make the current instance readonly. Use this method to prevent unexpected changes.
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.IVisualModel.Font">
            <summary>
            If null the default font is used
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.IVisualModel.BackColor">
            <summary>
            BackColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.IVisualModel.ForeColor">
            <summary>
            ForeColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.IVisualModel.Border">
            <summary>
            The normal border of a cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.IVisualModel.WordWrap">
            <summary>
            Word Wrap.  This property is only a wrapper around StringFormat
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.IVisualModel.TextAlignment">
            <summary>
            Text Alignment. This property is only a wrapper around StringFormat
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.IVisualModel.IsReadOnly">
            <summary>
            True if this class is ReadOnly otherwise False.
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.#ctor(System.Boolean)">
            <summary>
            Use default setting
            </summary>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.#ctor(SourceGrid2.VisualModels.VisualModelBase,System.Boolean)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="F:SourceGrid2.VisualModels.VisualModelBase.m_bIsReadOnly">
            <summary>
            ReadOnly variable.
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.MakeReadOnly">
            <summary>
            Make the current instance readonly. Use this method to prevent unexpected changes.
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.OnChange">
            <summary>
            Fired when you change a property of this class
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.GetCellFont">
            <summary>
            Get the font of the cell, check if the current font is null and in this case return the grid font
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.Clone">
            <summary>
            Clone this object. Also ReadOnly flag is copied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.Clone(System.Boolean)">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_bReadOnly">True if the new object must be read only, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.Measure(System.Drawing.Graphics,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Drawing.SizeF)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="p_Graphics"></param>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.DrawCell(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the cell specified
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.DrawCell_Background(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the background of the specified cell. Background
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.DrawCell_Border(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the borders of the specified cell.
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.DrawCell_ImageAndText(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the image and the displaystring of the specified cell.
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.ExportHTML(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter)">
            <summary>
            Export the cell contents in html format
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.ExportHTML_Attributes(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Write the attributes of the tag specified
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
            <param name="p_ElementTagName"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.VisualModelBase.ExportHTML_Element(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Write the content of the tag specified
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
            <param name="p_ElementTagName"></param>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.IsReadOnly">
            <summary>
            True if this class is ReadOnly otherwise False.
            </summary>
        </member>
        <member name="E:SourceGrid2.VisualModels.VisualModelBase.Change">
            <summary>
            Fired when you change a property of this class
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.StringFormat">
            <summary>
            StringFormat of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.Font">
            <summary>
            If null the grid font is used
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.BackColor">
            <summary>
            BackColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.ForeColor">
            <summary>
            ForeColor of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.Border">
            <summary>
            The normal border of a cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.WordWrap">
            <summary>
            Word Wrap.  This property is only a wrapper around StringFormat
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.VisualModelBase.TextAlignment">
            <summary>
            Text Alignment. This property is only a wrapper around StringFormat
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.Common.Default">
            <summary>
            Represents a default Model
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.Common.LinkStyle">
            <summary>
            Represents a model with a link style font and forecolor.
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.#ctor(System.Boolean)">
            <summary>
            Use default setting
            </summary>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.#ctor(SourceGrid2.VisualModels.Common,System.Boolean)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.Clone(System.Boolean)">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_bReadOnly">True if the new object must be read only, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.Measure(System.Drawing.Graphics,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Drawing.SizeF)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="p_Graphics"></param>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.DrawCell_Background(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the background of the specified cell. Background
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.DrawCell_Border(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the borders of the specified cell.
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.DrawCell_ImageAndText(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the image and the displaystring of the specified cell.
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.ExportHTML_Attributes(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Write the attributes of the tag specified
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
            <param name="p_ElementTagName"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.ExportHTML_Element(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Write the content of the tag specified
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
            <param name="p_ElementTagName"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Common.CanExportHTMLImage(System.Drawing.Image)">
            <summary>
            Returns true if the specified image can be exported for HTML, otherwise false. Override this method to prevent exporting certains images.
            </summary>
            <param name="p_Image"></param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.VisualModels.Common.Image">
            <summary>
            Image of the cell
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.Common.ImageStretch">
            <summary>
            True to stretch the image otherwise false
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.Common.AlignTextToImage">
            <summary>
            True to align the text with the image.
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.Common.ImageAlignment">
            <summary>
            Image Alignment
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.CheckBox.Default">
            <summary>
            Represents a default CheckBox with the CheckBox image align to the Middle Center of the cell. You must use this VisualModel with a Cell of type ICellCheckBox.
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.CheckBox.MiddleLeftAlign">
            <summary>
            Represents a CheckBox with the CheckBox image align to the Middle Right of the cell
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.#ctor(System.Boolean)">
            <summary>
            Use default setting
            </summary>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.#ctor(SourceGrid2.VisualModels.CheckBox,System.Boolean)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.Measure(System.Drawing.Graphics,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Drawing.SizeF)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="p_Graphics"></param>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.GetImageForState(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the image for the current check state
            </summary>
            <param name="p_Checked"></param>
            <param name="p_bIsSelected"></param>
            <param name="p_bIsCheckEnable"></param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.DrawCell_ImageAndText(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the image and the displaystring of the specified cell.
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
            <param name="p_Status"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.Clone(System.Boolean)">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_bReadOnly">True if the new object must be read only, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.CheckBox.ExportHTML_Element(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,SourceGrid2.IHTMLExport,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Write the content of the tag specified
            </summary>
            <param name="p_Cell"></param>
            <param name="p_Position"></param>
            <param name="p_Export"></param>
            <param name="p_Writer"></param>
            <param name="p_ElementTagName"></param>
        </member>
        <member name="P:SourceGrid2.VisualModels.CheckBox.CheckBoxAlignment">
            <summary>
            Image Alignment
            </summary>
        </member>
        <member name="T:SourceGrid2.VisualModels.FlatHeader">
            <summary>
            A VisualModel for a header. Draw a down or up arrow when sorted.
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.FlatHeader.Default">
            <summary>
            Represents a default Header
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.FlatHeader.ColumnHeader">
            <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.FlatHeader.RowHeader">
            <summary>
            Represents a Row Header.
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.FlatHeader.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.FlatHeader.#ctor(System.Boolean)">
            <summary>
            Use default setting
            </summary>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.FlatHeader.#ctor(SourceGrid2.VisualModels.FlatHeader,System.Boolean)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.FlatHeader.Measure(System.Drawing.Graphics,SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Drawing.SizeF)">
            <summary>
            Returns the minimum required size of the current cell, calculating using the current DisplayString, Image and Borders informations.
            </summary>
            <param name="p_Graphics"></param>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="maxLayoutArea">SizeF structure that specifies the maximum layout area for the text. If width or height are zero the value is set to a default maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.FlatHeader.Clone(System.Boolean)">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_bReadOnly">True if the new object must be read only, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.FlatHeader.DrawCell_ImageAndText(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the image and the displaystring of the specified cell.
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
            <param name="p_Status"></param>
        </member>
        <member name="T:SourceGrid2.VisualModels.Header">
            <summary>
            Summary description for a 3D Header.
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.Header.Default">
            <summary>
            Represents a default Header, with a 3D border and a LightGray BackColor
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.Header.ColumnHeader">
            <summary>
            Represents a Column Header with the ability to draw an Image in the right to indicates the sort operation. You must use this model with a cell of type ICellSortableHeader.
            </summary>
        </member>
        <member name="F:SourceGrid2.VisualModels.Header.RowHeader">
            <summary>
            Represents a Row Header.
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.Header.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.Header.#ctor(System.Boolean)">
            <summary>
            Use default setting
            </summary>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Header.#ctor(SourceGrid2.VisualModels.Header,System.Boolean)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.Header.Clone(System.Boolean)">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_bReadOnly">True if the new object must be read only, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:SourceGrid2.VisualModels.Header.DrawCell_Border(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the borders of the specified cell using DrawGradient3DBorder
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="P:SourceGrid2.VisualModels.Header.HeaderShadowColor">
            <summary>
            Specifies the dark color of this cell for 3D effects (BorderStyle)
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.Header.HeaderLightColor">
            <summary>
            Specifies the light color of this cell for 3D effects (BorderStyle)
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.Header.HeaderLightBorderWidth">
            <summary>
            Specified the width of the border for 3D effects (BorderStyle)
            </summary>
        </member>
        <member name="P:SourceGrid2.VisualModels.Header.HeaderShadowBorderWidth">
            <summary>
            Specified the width of the border for 3D effects (BorderStyle)
            </summary>
        </member>
        <member name="T:SourceGrid2.VisualModels.MultiImages">
            <summary>
            Summary description for VisualModelCheckBox.
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.MultiImages.#ctor">
            <summary>
            Use default setting and construct a read and write VisualProperties
            </summary>
        </member>
        <member name="M:SourceGrid2.VisualModels.MultiImages.#ctor(System.Boolean)">
            <summary>
            Use default setting
            </summary>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.MultiImages.#ctor(SourceGrid2.VisualModels.MultiImages,System.Boolean)">
            <summary>
            Copy constructor.  This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_Source"></param>
            <param name="p_bReadOnly"></param>
        </member>
        <member name="M:SourceGrid2.VisualModels.MultiImages.DrawCell_ImageAndText(SourceGrid2.Cells.ICellVirtual,SourceGrid2.Position,System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draw the image and the displaystring of the specified cell.
            </summary>
            <param name="p_Cell"></param>
            <param name="p_CellPosition"></param>
            <param name="e">Paint arguments</param>
            <param name="p_ClientRectangle">Rectangle position where draw the current cell, relative to the current view,</param>
        </member>
        <member name="M:SourceGrid2.VisualModels.MultiImages.Clone(System.Boolean)">
            <summary>
            Clone this object. This method duplicate all the reference field (Image, Font, StringFormat) creating a new instance.
            </summary>
            <param name="p_bReadOnly">True if the new object must be read only, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="P:SourceGrid2.VisualModels.MultiImages.SubImages">
            <summary>
            Images of the cells
            </summary>
        </member>
    </members>
</doc>
